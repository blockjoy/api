syntax = "proto3";

package blockjoy.api.v1;

import "node.proto";

// This message is used to store the metrics for a given set of nodes.
message NodeMetricsRequest {
    // This field maps the id of the node to the metrics that apply to that node.
    map<string, Metrics> metrics = 1;
}

// The metrics for a single `Node`. Note that there is no node id in this message, because it is
// embedded in the `NodeMetricsRequest`, where the key of the map already is the id of the node.
message Metrics {
    // This is the current height of the blockchain.
    optional uint64 height = 1;
    // This is the age of the most recent block, measured in seconds.
    optional uint64 block_age = 2;
    // This is the current staking status of the node.
    optional Node.StakingStatus staking_status = 3;
    // Iff the blockchain is in consensus, this field is `true``.
    optional bool consensus = 4;
}

message NodeMetricsResponse {}

// This message is used to store the metrics for a given set of hosts.
message HostMetricsRequest {
    // This field maps the id of the host to the metrics that apply to that host.
    map<string, HostMetrics> metrics = 1;
}

// The metrics for a single `Host`. Note that there is no host id in this message, because it is
// embedded in the `HostMetricsRequest`, where the key of the map already is the id of the host.
message HostMetrics {
    // The amount of CPU that is currently in use. This is given as the sum of percentages of each
    // core that is used. Example: if there are 4 cores, and each is at 78% usage, the number sent
    // will be 312.
    optional uint16 cpu = 1;
    // This is the amount of memory used, given in bytes.
    optional uint64 mem = 2;
    // This is the amount of disk used, given in bytes.
    optional uint64 disk = 3;
    // This is the load, given as a percentage. Example: if the load given by top is
    // `2.73, 2.96, 2.53`, then the value sent here will be 2.96.
    optional double load = 4;
    // This is the number of bytes (not bits) sent over the network since the start of the node.
    // This means that this value is going to increase monotonically when the node starts.
    optional uint64 network = 5;
}

message HostMetricsResponse {}

service Metrics {
    // Overwrite the metrics for the given nodes.
    rpc Node(NodeMetricsRequest) returns (NodeMetricsResponse);
    // Overwrite the metrics for the given hosts.
    rpc Host(HostMetricsRequest) returns (HostMetricsResponse);
}
