syntax = "proto3";

package blockjoy.api.v1;

import "node.proto";

message NodeMetricsRequest {
    // This field maps the id of the node to the metrics that apply to that node.
    map<string, Metrics> metrics = 1;
}

// The metrics for a single `Node`. Note that there is no node id in this message, because it is
// embedded in the `NodeMetricsRequest`, where the key of the map already is the id of the node.
message Metrics {
    // This is the current height of the blockchain.
    optional uint64 height = 1;
    // This is the age of the most recent block, measured in seconds.
    optional uint64 block_age = 2;
    // This is the current staking status of the node.
    optional NodeInfo.StakingStatus staking_status = 3;
    // Iff the blockchain is in consensus, this field is `true``.
    optional bool consensus = 4;
}

message NodeMetricsResponse {}

message HostMetricsRequest {
    // todo
}

message HostMetricsResponse {}

service MetricsService {
    // Overwrite the metrics for the given nodes.
    rpc Node(NodeMetricsRequest) returns (NodeMetricsResponse);
    // Overwrite the metrics for the giveb host.
    rpc Host(HostMetricsRequest) returns (HostMetricsResponse);
}
