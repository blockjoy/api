use std::future::Future;

use blockvisor_api::grpc::api;
use tonic::transport::Channel;

/// This is a client function that we can run through the test machinery. This
/// contains a _lot_ of generics so lets break it down:
///
/// 1. `'c`: This is the lifetime of the client. We restrict the lifetime of the
///    generated by the tested function to be at most `'c`, because that future
///    must borrow the client to make progress.
///
/// 2. `In`: This is the type of the data that goes into the tested function,
///    usually a struct implementing `Deserialize`.
///
/// 3. `Req`: This is some type that implements `IntoRequest<In>`, meaning that
///    it can be converted into a request containing the `In` structure.
///
/// 4. `Resp`: This is the type of data that the function returns. Usually a
///    struct (sometimes an enum) that implements `Serialize`.
///
/// 5. `Client`: This is the client struct that is used to query the server.
///    These are generated by `tonic` from the proto files, and are generic over
///    the transport layer. An example of what could go here is
///    `AuthenticationServiceClient<Channel>`. The `send` functions require that
///    this type implements `GrpcClient`.
pub trait TestableFunction<'c, In, Req, Resp, Client>:
    Fn(&'c mut Client, Req) -> Self::Fut
where
    Client: 'static,
{
    type Fut: Future<Output = Result<Resp, tonic::Status>> + 'c;
}

/// Implement our test function trait for all functions of the right signature.
impl<'c, F, Fut, In, Req, Resp, Client> TestableFunction<'c, In, Req, Resp, Client> for F
where
    F: Fn(&'c mut Client, Req) -> Fut,
    Fut: Future<Output = Result<Resp, tonic::Status>> + 'c,
    Client: 'static,
{
    type Fut = Fut;
}

pub trait GrpcClient<T> {
    fn create(channel: Channel) -> Self;
}

impl GrpcClient<Channel> for api::api_key_service_client::ApiKeyServiceClient<Channel> {
    fn create(channel: Channel) -> Self {
        Self::new(channel)
    }
}

impl GrpcClient<Channel> for api::auth_service_client::AuthServiceClient<Channel> {
    fn create(channel: Channel) -> Self {
        Self::new(channel)
    }
}

impl GrpcClient<Channel> for api::babel_service_client::BabelServiceClient<Channel> {
    fn create(channel: Channel) -> Self {
        Self::new(channel)
    }
}

impl GrpcClient<Channel> for api::blockchain_service_client::BlockchainServiceClient<Channel> {
    fn create(channel: Channel) -> Self {
        Self::new(channel)
    }
}

impl GrpcClient<Channel> for api::command_service_client::CommandServiceClient<Channel> {
    fn create(channel: Channel) -> Self {
        Self::new(channel)
    }
}

impl GrpcClient<Channel> for api::discovery_service_client::DiscoveryServiceClient<Channel> {
    fn create(channel: Channel) -> Self {
        Self::new(channel)
    }
}

impl GrpcClient<Channel> for api::host_service_client::HostServiceClient<Channel> {
    fn create(channel: Channel) -> Self {
        Self::new(channel)
    }
}

impl GrpcClient<Channel> for api::invitation_service_client::InvitationServiceClient<Channel> {
    fn create(channel: Channel) -> Self {
        Self::new(channel)
    }
}

impl GrpcClient<Channel> for api::key_file_service_client::KeyFileServiceClient<Channel> {
    fn create(channel: Channel) -> Self {
        Self::new(channel)
    }
}

impl GrpcClient<Channel> for api::metrics_service_client::MetricsServiceClient<Channel> {
    fn create(channel: Channel) -> Self {
        Self::new(channel)
    }
}

impl GrpcClient<Channel> for api::node_service_client::NodeServiceClient<Channel> {
    fn create(channel: Channel) -> Self {
        Self::new(channel)
    }
}

impl GrpcClient<Channel> for api::org_service_client::OrgServiceClient<Channel> {
    fn create(channel: Channel) -> Self {
        Self::new(channel)
    }
}

impl GrpcClient<Channel> for api::subscription_service_client::SubscriptionServiceClient<Channel> {
    fn create(channel: Channel) -> Self {
        Self::new(channel)
    }
}

impl GrpcClient<Channel> for api::user_service_client::UserServiceClient<Channel> {
    fn create(channel: Channel) -> Self {
        Self::new(channel)
    }
}
