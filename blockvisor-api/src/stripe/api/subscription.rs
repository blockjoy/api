#[derive(Debug, serde::Deserialize)]
pub struct SubscriptionId(pub String);

#[derive(Debug, serde::Deserialize)]
pub struct Subscription {
    /// Unique identifier for the object.
    pub id: SubscriptionId,
    /// Time at which the object was created.
    ///
    /// Measured in seconds since the Unix epoch.
    pub created: super::Timestamp,
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in
    /// lowercase.
    ///
    /// Must be a [supported currency](https://stripe.com/docs/currencies).
    pub currency: super::currency::Currency,
    /// End of the current period that the subscription has been invoiced for.
    ///
    /// At the end of this period, a new invoice will be created.
    pub current_period_end: super::Timestamp,
    /// Start of the current period that the subscription has been invoiced for.
    pub current_period_start: super::Timestamp,
    /// ID of the customer who owns the subscription.
    pub customer: super::IdOrObject<String, super::customer::Customer>,
    /// Number of days a customer has to pay invoices generated by this subscription.
    ///
    /// This value will be `null` for subscriptions where `collection_method=charge_automatically`.
    pub days_until_due: Option<u32>,
    /// ID of the default payment method for the subscription.
    ///
    /// It must belong to the customer associated with the subscription.
    /// This takes precedence over `default_source`.
    /// If neither are set, invoices will use the customer's invoice_settings.default_payment_method
    /// default_source.
    pub default_payment_method: Option<String>,
    /// The subscription's description, meant to be displayable to the customer.
    ///
    /// Use this field to optionally store an explanation of the subscription for rendering in
    /// Stripe surfaces and certain local payment methods UIs.
    pub description: Option<String>,
    /// If the subscription has ended, the date the subscription ended.
    pub ended_at: Option<super::Timestamp>,
    /// List of subscription items, each with an attached price.
    pub items: super::ListResponse<SubscriptionItem>,
    /// Has the value `true` if the object exists in live mode or the value `false` if the object
    /// exists in test mode.
    pub livemode: bool,
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an
    /// object.
    ///
    /// This can be useful for storing additional information about the object in a structured
    /// format.
    pub metadata: super::Metadata,
    /// Date when the subscription was first created.
    ///
    /// The date might differ from the `created` date due to backdating.
    pub start_date: super::Timestamp,
    /// Possible values are `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`,
    /// `canceled`, or `unpaid`.
    ///
    /// For `collection_method=charge_automatically` a subscription moves into `incomplete` if the
    /// initial payment attempt fails. A subscription in this state can only have metadata and
    /// default_source updated. Once the first invoice is paid, the subscription moves into an
    /// `active` state. If the first invoice is not paid within 23 hours, the subscription
    /// transitions to `incomplete_expired`. This is a terminal state, the open invoice will be
    /// voided and no further invoices will be generated. A subscription that is currently in a
    /// trial period is `trialing` and moves to `active` when the trial period is over. If
    /// subscription `collection_method=charge_automatically`, it becomes `past_due` when payment is
    /// required but cannot be paid (due to failed payment or awaiting additional user actions).
    /// Once Stripe has exhausted all payment retry attempts, the subscription will become
    /// `canceled` or `unpaid` (depending on your subscriptions settings). If subscription
    /// `collection_method=send_invoice` it becomes `past_due` when its invoice is not paid by the
    /// due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after
    /// that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be
    /// attempted (invoices will be created, but then immediately automatically closed). After
    /// receiving updated payment information from a customer, you may choose to reopen and pay
    /// their closed invoices.
    pub status: SubscriptionStatus,
    /// If the subscription has a trial, the end of that trial.
    pub trial_end: Option<super::Timestamp>,
    /// If the subscription has a trial, the beginning of that trial.
    pub trial_start: Option<super::Timestamp>,
}

/// An enum representing the possible values of an `Subscription`'s `status` field.
#[derive(Debug, serde::Deserialize, derive_more::Display)]
#[serde(rename_all = "snake_case")]
pub enum SubscriptionStatus {
    Active,
    Canceled,
    Incomplete,
    IncompleteExpired,
    PastDue,
    Paused,
    Trialing,
    Unpaid,
}

/// The resource representing a Stripe "SubscriptionItem".
///
/// For more details see <https://stripe.com/docs/api/subscription_items/object>
#[derive(Debug, serde::Deserialize)]
pub struct SubscriptionItem {
    /// Unique identifier for the object.
    pub id: String,
    /// Time at which the object was created.
    ///
    /// Measured in seconds since the Unix epoch.
    pub created: Option<super::Timestamp>,
    // Always true for a deleted object
    #[serde(default)]
    pub deleted: bool,
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an
    /// object.
    ///
    /// This can be useful for storing additional information about the object in a structured
    /// format.
    pub metadata: Option<super::Metadata>,
    pub plan: Option<Plan>,
    pub price: Option<Price>,
    /// The [quantity](https://stripe.com/docs/subscriptions/quantities) of the plan to which the
    /// customer should be subscribed.
    pub quantity: Option<u64>,
    /// The `subscription` this `subscription_item` belongs to.
    pub subscription: Option<String>,
}

/// The resource representing a Stripe "Plan".
///
/// For more details see <https://stripe.com/docs/api/plans/object>
#[derive(Debug, serde::Deserialize)]
pub struct Plan {
    /// Unique identifier for the object.
    pub id: String,
    /// Whether the plan can be used for new purchases.
    pub active: Option<bool>,
    /// The unit amount in cents (or local equivalent) to be charged, represented as a whole integer
    /// if possible.
    ///
    /// Only set if `billing_scheme=per_unit`.
    pub amount: Option<i64>,
    /// The unit amount in cents (or local equivalent) to be charged, represented as a decimal
    /// string with at most 12 decimal places.
    ///
    /// Only set if `billing_scheme=per_unit`.
    pub amount_decimal: Option<String>,
    /// Time at which the object was created.
    ///
    /// Measured in seconds since the Unix epoch.
    pub created: Option<super::Timestamp>,
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in
    /// lowercase.
    ///
    /// Must be a [supported currency](https://stripe.com/docs/currencies).
    pub currency: Option<super::currency::Currency>,
    // Always true for a deleted object
    #[serde(default)]
    pub deleted: bool,
    /// The number of intervals (specified in the `interval` attribute) between subscription
    /// billings.
    ///
    /// For example, `interval=month` and `interval_count=3` bills every 3 months.
    pub interval_count: Option<u64>,
    /// Has the value `true` if the object exists in live mode or the value `false` if the object
    /// exists in test mode.
    pub livemode: Option<bool>,
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an
    /// object.
    ///
    /// This can be useful for storing additional information about the object in a structured
    /// format.
    pub metadata: Option<super::Metadata>,
    /// A brief description of the plan, hidden from customers.
    pub nickname: Option<String>,
    /// Default number of trial days when subscribing a customer to this plan using
    /// [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan).
    pub trial_period_days: Option<u32>,
}

/// The resource representing a Stripe "Price".
///
/// For more details see <https://stripe.com/docs/api/prices/object>
#[derive(Debug, serde::Deserialize)]
pub struct Price {
    /// Unique identifier for the object.
    pub id: String,
    /// Whether the price can be used for new purchases.
    pub active: Option<bool>,
    /// Time at which the object was created.
    ///
    /// Measured in seconds since the Unix epoch.
    pub created: Option<super::Timestamp>,
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in
    /// lowercase.
    ///
    /// Must be a [supported currency](https://stripe.com/docs/currencies).
    pub currency: Option<super::currency::Currency>,
    // Always true for a deleted object
    #[serde(default)]
    pub deleted: bool,
    /// Has the value `true` if the object exists in live mode or the value `false` if the object
    /// exists in test mode.
    pub livemode: Option<bool>,
    /// A lookup key used to retrieve prices dynamically from a static string.
    ///
    /// This may be up to 200 characters.
    pub lookup_key: Option<String>,
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an
    /// object.
    ///
    /// This can be useful for storing additional information about the object in a structured
    /// format.
    pub metadata: Option<super::Metadata>,
    /// A brief description of the price, hidden from customers.
    pub nickname: Option<String>,
    /// The unit amount in cents (or local equivalent) to be charged, represented as a whole integer
    /// if possible.
    ///
    /// Only set if `billing_scheme=per_unit`.
    pub unit_amount: Option<i64>,
    /// The unit amount in cents (or local equivalent) to be charged, represented as a decimal
    /// string with at most 12 decimal places.
    ///
    /// Only set if `billing_scheme=per_unit`.
    pub unit_amount_decimal: Option<String>,
}

/// The parameters for `Subscription::list`.
#[derive(Debug, serde::Serialize, Default)]
pub struct ListSubscriptions<'a> {
    /// The ID of the customer whose subscriptions will be retrieved.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub customer: Option<&'a str>,
}

impl<'a> ListSubscriptions<'a> {
    pub const fn new(customer_id: &'a str) -> Self {
        Self {
            customer: Some(customer_id),
        }
    }
}

impl super::StripeEndpoint for ListSubscriptions<'_> {
    type Result = super::ListResponse<Subscription>;

    fn method(&self) -> reqwest::Method {
        reqwest::Method::GET
    }

    fn path(&self) -> String {
        "subscriptions".to_string()
    }

    fn query(&self) -> Option<&Self> {
        Some(self)
    }
}
