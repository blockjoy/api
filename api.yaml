openapi: 3.1.0
info:
  title: api
  version: '1.0'
  summary: StakeJoy's API
  contact:
    name: Chris Bruce
    url: www.stakejoy.com
    email: chris@stakejoy.com
  description: StakeJoy's API for managing Validators.
servers:
  - url: 'https://api.stakejoy.com'
    description: Production
  - url: 'http://localhost:3000'
    description: Local
paths:
  /hosts:
    get:
      summary: List hosts
      tags:
        - hosts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Host'
      operationId: list_hosts
      description: Lists all the hosts.
      parameters: []
    post:
      summary: Add Host
      operationId: add_host
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostCreateRequest'
      description: Creates a new host and all validators based on the val_ip_addrs comma separated list of ips. Unique "pet-names" are automatically generated and assigned to each new validator.
  /validators:
    get:
      summary: List Validators
      tags:
        - validators
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Validator'
      operationId: get-validators
      description: Lists all the hosts.
  '/hosts/token/{token}':
    get:
      summary: Get Host by Token
      tags:
        - hosts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
      operationId: get_host_by_token
      description: Gets a host by its token.
    parameters:
      - schema:
          type: string
          format: uuid
        name: token
        in: path
        required: true
        description: host's token
  '/hosts/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: The host's id
    get:
      summary: Get Host
      tags:
        - hosts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
      operationId: get_host
    put:
      summary: Update Host
      operationId: update_host
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostRequest'
    delete:
      summary: Delete Host
      operationId: delete_host
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
      tags:
        - hosts
  '/users/{id}/validators':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The user's id.
    get:
      summary: List Validators by User
      tags:
        - validators
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Validator'
      operationId: list_validators_by_user
      description: ''
    post:
      summary: Stake a Validator
      operationId: stake_validator
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Validator'
      tags:
        - validators
      description: Stakes an available validator for a user.
      security: []
  '/validators/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The validator id.
    get:
      summary: Get Validator
      tags:
        - validators
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Validator'
      operationId: get_validator
      description: ''
  '/validators/{id}/status':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The validator's id.
    put:
      summary: Update Validator Status
      operationId: update_validator_status
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Validator'
      description: Update the validator's status.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidatorStatusRequest'
      tags:
        - validators
  '/validators/{id}/identity':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    put:
      summary: Update Validator Identity
      operationId: update_validator_identity
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Validator'
      description: Updates the validator's idenity info.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidatorIdentityRequest'
      tags:
        - validators
  '/hosts/{host_id}/commands':
    parameters:
      - schema:
          type: string
        name: host_id
        in: path
        required: true
    get:
      summary: List Commands by Host
      tags:
        - hosts
        - commands
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Command'
      operationId: list_commands
    post:
      summary: Create new Command
      operationId: create_command
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Command'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommandRequest'
  '/hosts/{host_id}/commands/pending':
    parameters:
      - schema:
          type: string
        name: host_id
        in: path
        required: true
    get:
      summary: List Pending Commands for Host
      tags:
        - hosts
        - commands
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Command'
      operationId: list_pending_commands
  '/commands/{id}/response':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    put:
      summary: Update Command Response
      operationId: update_command_response
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Command'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommandResponseRequest'
      tags:
        - commands
  '/command/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Get a Command
      tags:
        - commands
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Command'
      operationId: get_command
    delete:
      summary: ''
      operationId: delete_command
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
  /login:
    post:
      summary: Login
      operationId: login
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
      tags:
        - authentication
  /users:
    post:
      summary: Create User
      operationId: create_user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRequest'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      tags:
        - users
        - authentication
  /refresh:
    post:
      summary: Refresh Auth Token
      operationId: post-refresh
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      description: Refreshes and auth token. Requires refresh token and jwt token (even if expired).
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh:
                  type: string
              required:
                - refresh
      tags:
        - authentication
  /whoami:
    get:
      summary: Get Login Authentication
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/User'
                  - $ref: '#/components/schemas/Host'
                description: |
                  Returns Host or User depending on Authorization credentials.
      operationId: get-whoami
      security: []
  /validators/inventory/count:
    get:
      summary: Get Validator Inventory Count
      tags:
        - validators
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
      operationId: validator_inventory_count
      description: Get the number of validators available for customers to stake.
      security: []
  '/validators/{id}/stake_status':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    put:
      summary: Update Validator Stake Status
      operationId: update_validator_stake_status
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Validator'
      tags:
        - validators
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StakeStatus'
  /validators/staking:
    get:
      summary: Get Validators in Staking Status
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Validator'
      operationId: list_validators_staking
  '/validators/{id}/owner_address':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    put:
      summary: Update Validator's Owner Address
      operationId: update_validator_owner_address
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Validator'
      tags:
        - validators
      description: Update the validator with the owner's helium wallet address.
      requestBody:
        content:
          application/json:
            schema:
              type: string
  '/users/{id}/rewards/summary':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: user's id
    get:
      summary: Get Rewards Summary for User
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RewardSummary'
      operationId: get_reward_summary
  '/users/{id}/bills':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: List Bills for User
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bill'
      operationId: list_bills
  /validators/needs_attention:
    get:
      summary: Validators In Need of Attention
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ValidatorDetail'
      operationId: list_validators_attention
      description: A list of validators that needs some attention.
components:
  schemas:
    Host:
      title: Host
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        version:
          type: string
        location:
          type: string
        ip_addr:
          type: string
          format: ipv4
        val_ip_addrs:
          type: string
          description: A comma separated list of validator ip addresses.
        token:
          type: string
          description: 'Host''s auth token, used to connect to api as a host.'
        status:
          $ref: '#/components/schemas/ConnectionStatus'
        validators:
          type: array
          items:
            $ref: '#/components/schemas/Validator'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
        - id
        - name
        - ip_addr
        - val_ip_addrs
        - token
        - status
        - created_at
    Validator:
      title: Validator
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        version:
          type: string
        ip_addr:
          type: string
          format: ipv4
        host_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        address:
          type: string
          description: The peer address of the validator.
        swarm_key:
          type: string
          description: |
            Base64 encoded swarm key.
        block_height:
          type: integer
          format: int64
        stake_status:
          $ref: '#/components/schemas/StakeStatus'
        status:
          $ref: '#/components/schemas/ValidatorStatus'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        tenure_penalty:
          type: number
          format: float
        dkg_penalty:
          type: number
          format: float
        performance_penalty:
          type: number
          format: float
        total_penalty:
          type: number
          format: float
        owner_address:
          type: string
          description: The stake owners wallet address. This is where the validator's rewards are sent.
        address_name:
          type: string
          description: The 'angry-purple-tiger' name of the validator's blockchain address.
      required:
        - id
        - name
        - ip_addr
        - host_id
        - stake_status
        - status
        - created_at
    HostRequest:
      title: HostRequest
      type: object
      properties:
        name:
          type: string
        version:
          type: string
        location:
          type: string
        ip_addr:
          type: string
          format: ipv4
        val_ip_addrs:
          type: string
          description: A comma separated list of validator ip addresses that should exist on the host.
        token:
          type: string
        status:
          $ref: '#/components/schemas/ConnectionStatus'
      required:
        - name
        - ip_addr
        - val_ip_addrs
        - token
        - status
    HostCreateRequest:
      title: HostCreateRequest
      type: object
      properties:
        name:
          type: string
        version:
          type: string
        location:
          type: string
        ip_addr:
          type: string
          format: ipv4
        val_ip_addrs:
          type: string
          description: A comma separated list of ip address that are used by the validators.
      required:
        - name
        - ip_addr
        - val_ip_addrs
    ValidatorRequest:
      title: ValidatorRequest
      type: object
      properties:
        name:
          type: string
          description: This is autogenerated by the server.
        version:
          type: string
        ip_addr:
          type: string
          format: ipv4
        host_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        address:
          type: string
        swarm_key:
          type: string
          description: |
            Base64 encoded swarm key.
        stake_status:
          $ref: '#/components/schemas/StakeStatus'
        status:
          $ref: '#/components/schemas/ValidatorStatus'
        tenure_penalty:
          type: number
          format: float
        dkg_penalty:
          type: number
          format: float
        performance_penalty:
          type: number
          format: float
        total_penalty:
          type: number
          format: float
      required:
        - name
        - ip_addr
        - host_id
        - stake_status
        - status
        - tenure_penalty
        - dkg_penalty
        - performance_penalty
        - total_penalty
    ConnectionStatus:
      type: string
      title: ConnectionStatus
      enum:
        - online
        - offline
    ValidatorStatus:
      type: string
      title: ValidatorStatus
      enum:
        - provisioning
        - syncing
        - upgrading
        - synced
        - consensus
        - stopped
    StakeStatus:
      type: string
      title: StakeStatus
      enum:
        - available
        - staking
        - staked
        - deliquent
        - disabled
    ValidatorStatusRequest:
      title: ValidatorStatusRequest
      type: object
      properties:
        version:
          type: string
        block_height:
          type: integer
          format: int64
        stake_status:
          $ref: '#/components/schemas/StakeStatus'
        status:
          $ref: '#/components/schemas/ValidatorStatus'
        tenure_penalty:
          type: number
          format: float
        dkg_penalty:
          type: number
          format: float
        performance_penalty:
          type: number
          format: float
        total_penalty:
          type: number
          format: float
      required:
        - stake_status
        - status
        - tenure_penalty
        - dkg_penalty
        - performance_penalty
        - total_penalty
    ValidatorIdentityRequest:
      title: ValidatorIdentityRequest
      type: object
      properties:
        version:
          type: string
        address:
          type: string
        swarm_key:
          type: string
    HostCmd:
      type: string
      title: HostCmd
      enum:
        - restart_miner
        - restart_jail
        - get_miner_name
        - get_block_height
        - all
      description: The command to send to warden.
    Command:
      title: Command
      type: object
      properties:
        id:
          type: string
          format: uuid
        host_id:
          type: string
          format: uuid
        cmd:
          $ref: '#/components/schemas/HostCmd'
        sub_cmd:
          type: string
          description: An optional subcommand like jail name.
        response:
          type: string
          description: The response from running the command.
        exit_status:
          type: integer
          format: int32
          description: The exit status from running the command.
        created_at:
          type: string
          format: date-time
        completed_at:
          type: string
          format: date-time
      required:
        - id
        - host_id
        - cmd
    CommandRequest:
      title: CommandRequest
      type: object
      properties:
        cmd:
          $ref: '#/components/schemas/HostCmd'
        sub_cmd:
          type: string
          description: An optional sub command like jail-name
    CommandResponseRequest:
      title: CommandResponseRequest
      type: object
      properties:
        response:
          type: string
        exit_status:
          type: integer
          format: int32
    User:
      title: User
      type: object
      description: ''
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        refresh:
          type: string
          description: Refresh Token used to refresh a JWT
          format: uuid
        token:
          type: string
          description: JWT for authentication
          format: JWT
        created_at:
          type: string
          format: date-time
        staking_quota:
          type: integer
          description: |
            The total number of validators a customer is allowed to have in the 'staking' mode.
      required:
        - id
        - email
    UserRequest:
      title: UserRequest
      type: object
      properties:
        email:
          type: string
        password:
          type: string
          minLength: 8
        password_confirm:
          type: string
          minLength: 8
      required:
        - email
        - password
        - password_confirm
    UserLoginRequest:
      title: UserLoginRequest
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
      required:
        - email
        - password
    RewardSummary:
      title: RewardSummary
      type: object
      properties:
        total:
          type: integer
          format: int64
          description: total rewards in bones for user
        last_30:
          type: integer
          format: int64
          description: total rewards in bones for last 30 days
        last_14:
          type: integer
          format: int64
          description: total rewards in bones for last 14 days
        last_7:
          type: integer
          format: int64
          description: total rewards in bones for last 7 days
        last_1:
          type: integer
          format: int64
          description: total rewards in bones for last 1 day
    Bill:
      title: Bill
      type: object
      description: ''
      properties:
        date:
          type: string
          format: date
        amount:
          type: integer
          format: int64
    ValidatorDetail:
      title: ValidatorDetail
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        version:
          type: string
        host_name:
          type: string
        host_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        user_email:
          type: string
        address:
          type: string
        address_name:
          type: string
        block_height:
          type: integer
          format: int64
        stake_status:
          type: string
        status:
          type: string
        tenure_penalty:
          type: number
          format: float
        dkg_penalty:
          type: number
          format: float
        performance_penalty:
          type: number
          format: float
        total_penalty:
          type: number
          format: float
        staking_height:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      description: Validator with Detailed properties
  securitySchemes:
    Authorization:
      type: http
      scheme: bearer
tags:
  - name: authentication
  - name: commands
  - name: hosts
  - name: users
  - name: validators
