// source: fe_host_service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
goog.exportSymbol('proto.blockjoy.api.ui_v1.CreateHostRequest', null, global);
goog.exportSymbol('proto.blockjoy.api.ui_v1.CreateHostResponse', null, global);
goog.exportSymbol('proto.blockjoy.api.ui_v1.DeleteHostRequest', null, global);
goog.exportSymbol('proto.blockjoy.api.ui_v1.DeleteHostResponse', null, global);
goog.exportSymbol('proto.blockjoy.api.ui_v1.GetHostsRequest', null, global);
goog.exportSymbol('proto.blockjoy.api.ui_v1.GetHostsResponse', null, global);
goog.exportSymbol('proto.blockjoy.api.ui_v1.UpdateHostRequest', null, global);
goog.exportSymbol('proto.blockjoy.api.ui_v1.UpdateHostResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockjoy.api.ui_v1.GetHostsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockjoy.api.ui_v1.GetHostsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockjoy.api.ui_v1.GetHostsRequest.displayName = 'proto.blockjoy.api.ui_v1.GetHostsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockjoy.api.ui_v1.GetHostsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.blockjoy.api.ui_v1.GetHostsResponse.repeatedFields_, null);
};
goog.inherits(proto.blockjoy.api.ui_v1.GetHostsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockjoy.api.ui_v1.GetHostsResponse.displayName = 'proto.blockjoy.api.ui_v1.GetHostsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockjoy.api.ui_v1.CreateHostRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockjoy.api.ui_v1.CreateHostRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockjoy.api.ui_v1.CreateHostRequest.displayName = 'proto.blockjoy.api.ui_v1.CreateHostRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockjoy.api.ui_v1.CreateHostResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockjoy.api.ui_v1.CreateHostResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockjoy.api.ui_v1.CreateHostResponse.displayName = 'proto.blockjoy.api.ui_v1.CreateHostResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockjoy.api.ui_v1.UpdateHostRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockjoy.api.ui_v1.UpdateHostRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockjoy.api.ui_v1.UpdateHostRequest.displayName = 'proto.blockjoy.api.ui_v1.UpdateHostRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockjoy.api.ui_v1.UpdateHostResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockjoy.api.ui_v1.UpdateHostResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockjoy.api.ui_v1.UpdateHostResponse.displayName = 'proto.blockjoy.api.ui_v1.UpdateHostResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockjoy.api.ui_v1.DeleteHostRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockjoy.api.ui_v1.DeleteHostRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockjoy.api.ui_v1.DeleteHostRequest.displayName = 'proto.blockjoy.api.ui_v1.DeleteHostRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockjoy.api.ui_v1.DeleteHostResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockjoy.api.ui_v1.DeleteHostResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockjoy.api.ui_v1.DeleteHostResponse.displayName = 'proto.blockjoy.api.ui_v1.DeleteHostResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockjoy.api.ui_v1.GetHostsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.blockjoy.api.ui_v1.GetHostsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockjoy.api.ui_v1.GetHostsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.GetHostsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    meta: (f = msg.getMeta()) && common_pb.RequestMeta.toObject(includeInstance, f),
    id: (f = msg.getId()) && common_pb.Uuid.toObject(includeInstance, f),
    orgId: (f = msg.getOrgId()) && common_pb.Uuid.toObject(includeInstance, f),
    token: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockjoy.api.ui_v1.GetHostsRequest}
 */
proto.blockjoy.api.ui_v1.GetHostsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockjoy.api.ui_v1.GetHostsRequest;
  return proto.blockjoy.api.ui_v1.GetHostsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockjoy.api.ui_v1.GetHostsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockjoy.api.ui_v1.GetHostsRequest}
 */
proto.blockjoy.api.ui_v1.GetHostsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.RequestMeta;
      reader.readMessage(value,common_pb.RequestMeta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    case 2:
      var value = new common_pb.Uuid;
      reader.readMessage(value,common_pb.Uuid.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 3:
      var value = new common_pb.Uuid;
      reader.readMessage(value,common_pb.Uuid.deserializeBinaryFromReader);
      msg.setOrgId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockjoy.api.ui_v1.GetHostsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockjoy.api.ui_v1.GetHostsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockjoy.api.ui_v1.GetHostsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.GetHostsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.RequestMeta.serializeBinaryToWriter
    );
  }
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Uuid.serializeBinaryToWriter
    );
  }
  f = message.getOrgId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      common_pb.Uuid.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional RequestMeta meta = 1;
 * @return {?proto.blockjoy.api.ui_v1.RequestMeta}
 */
proto.blockjoy.api.ui_v1.GetHostsRequest.prototype.getMeta = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.RequestMeta} */ (
    jspb.Message.getWrapperField(this, common_pb.RequestMeta, 1));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.RequestMeta|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.GetHostsRequest} returns this
*/
proto.blockjoy.api.ui_v1.GetHostsRequest.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.GetHostsRequest} returns this
 */
proto.blockjoy.api.ui_v1.GetHostsRequest.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.GetHostsRequest.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Uuid id = 2;
 * @return {?proto.blockjoy.api.ui_v1.Uuid}
 */
proto.blockjoy.api.ui_v1.GetHostsRequest.prototype.getId = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.Uuid} */ (
    jspb.Message.getWrapperField(this, common_pb.Uuid, 2));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.Uuid|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.GetHostsRequest} returns this
*/
proto.blockjoy.api.ui_v1.GetHostsRequest.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.GetHostsRequest} returns this
 */
proto.blockjoy.api.ui_v1.GetHostsRequest.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.GetHostsRequest.prototype.hasId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Uuid org_id = 3;
 * @return {?proto.blockjoy.api.ui_v1.Uuid}
 */
proto.blockjoy.api.ui_v1.GetHostsRequest.prototype.getOrgId = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.Uuid} */ (
    jspb.Message.getWrapperField(this, common_pb.Uuid, 3));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.Uuid|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.GetHostsRequest} returns this
*/
proto.blockjoy.api.ui_v1.GetHostsRequest.prototype.setOrgId = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.GetHostsRequest} returns this
 */
proto.blockjoy.api.ui_v1.GetHostsRequest.prototype.clearOrgId = function() {
  return this.setOrgId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.GetHostsRequest.prototype.hasOrgId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string token = 4;
 * @return {string}
 */
proto.blockjoy.api.ui_v1.GetHostsRequest.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.blockjoy.api.ui_v1.GetHostsRequest} returns this
 */
proto.blockjoy.api.ui_v1.GetHostsRequest.prototype.setToken = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.GetHostsRequest} returns this
 */
proto.blockjoy.api.ui_v1.GetHostsRequest.prototype.clearToken = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.GetHostsRequest.prototype.hasToken = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.blockjoy.api.ui_v1.GetHostsResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockjoy.api.ui_v1.GetHostsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.blockjoy.api.ui_v1.GetHostsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockjoy.api.ui_v1.GetHostsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.GetHostsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    meta: (f = msg.getMeta()) && common_pb.ResponseMeta.toObject(includeInstance, f),
    hostsList: jspb.Message.toObjectList(msg.getHostsList(),
    common_pb.Host.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockjoy.api.ui_v1.GetHostsResponse}
 */
proto.blockjoy.api.ui_v1.GetHostsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockjoy.api.ui_v1.GetHostsResponse;
  return proto.blockjoy.api.ui_v1.GetHostsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockjoy.api.ui_v1.GetHostsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockjoy.api.ui_v1.GetHostsResponse}
 */
proto.blockjoy.api.ui_v1.GetHostsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.ResponseMeta;
      reader.readMessage(value,common_pb.ResponseMeta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    case 2:
      var value = new common_pb.Host;
      reader.readMessage(value,common_pb.Host.deserializeBinaryFromReader);
      msg.addHosts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockjoy.api.ui_v1.GetHostsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockjoy.api.ui_v1.GetHostsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockjoy.api.ui_v1.GetHostsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.GetHostsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.ResponseMeta.serializeBinaryToWriter
    );
  }
  f = message.getHostsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      common_pb.Host.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseMeta meta = 1;
 * @return {?proto.blockjoy.api.ui_v1.ResponseMeta}
 */
proto.blockjoy.api.ui_v1.GetHostsResponse.prototype.getMeta = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.ResponseMeta} */ (
    jspb.Message.getWrapperField(this, common_pb.ResponseMeta, 1));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.ResponseMeta|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.GetHostsResponse} returns this
*/
proto.blockjoy.api.ui_v1.GetHostsResponse.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.GetHostsResponse} returns this
 */
proto.blockjoy.api.ui_v1.GetHostsResponse.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.GetHostsResponse.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Host hosts = 2;
 * @return {!Array<!proto.blockjoy.api.ui_v1.Host>}
 */
proto.blockjoy.api.ui_v1.GetHostsResponse.prototype.getHostsList = function() {
  return /** @type{!Array<!proto.blockjoy.api.ui_v1.Host>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.Host, 2));
};


/**
 * @param {!Array<!proto.blockjoy.api.ui_v1.Host>} value
 * @return {!proto.blockjoy.api.ui_v1.GetHostsResponse} returns this
*/
proto.blockjoy.api.ui_v1.GetHostsResponse.prototype.setHostsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.blockjoy.api.ui_v1.Host=} opt_value
 * @param {number=} opt_index
 * @return {!proto.blockjoy.api.ui_v1.Host}
 */
proto.blockjoy.api.ui_v1.GetHostsResponse.prototype.addHosts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.blockjoy.api.ui_v1.Host, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.blockjoy.api.ui_v1.GetHostsResponse} returns this
 */
proto.blockjoy.api.ui_v1.GetHostsResponse.prototype.clearHostsList = function() {
  return this.setHostsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockjoy.api.ui_v1.CreateHostRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.blockjoy.api.ui_v1.CreateHostRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockjoy.api.ui_v1.CreateHostRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.CreateHostRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    meta: (f = msg.getMeta()) && common_pb.RequestMeta.toObject(includeInstance, f),
    host: (f = msg.getHost()) && common_pb.Host.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockjoy.api.ui_v1.CreateHostRequest}
 */
proto.blockjoy.api.ui_v1.CreateHostRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockjoy.api.ui_v1.CreateHostRequest;
  return proto.blockjoy.api.ui_v1.CreateHostRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockjoy.api.ui_v1.CreateHostRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockjoy.api.ui_v1.CreateHostRequest}
 */
proto.blockjoy.api.ui_v1.CreateHostRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.RequestMeta;
      reader.readMessage(value,common_pb.RequestMeta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    case 2:
      var value = new common_pb.Host;
      reader.readMessage(value,common_pb.Host.deserializeBinaryFromReader);
      msg.setHost(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockjoy.api.ui_v1.CreateHostRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockjoy.api.ui_v1.CreateHostRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockjoy.api.ui_v1.CreateHostRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.CreateHostRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.RequestMeta.serializeBinaryToWriter
    );
  }
  f = message.getHost();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Host.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestMeta meta = 1;
 * @return {?proto.blockjoy.api.ui_v1.RequestMeta}
 */
proto.blockjoy.api.ui_v1.CreateHostRequest.prototype.getMeta = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.RequestMeta} */ (
    jspb.Message.getWrapperField(this, common_pb.RequestMeta, 1));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.RequestMeta|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.CreateHostRequest} returns this
*/
proto.blockjoy.api.ui_v1.CreateHostRequest.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.CreateHostRequest} returns this
 */
proto.blockjoy.api.ui_v1.CreateHostRequest.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.CreateHostRequest.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Host host = 2;
 * @return {?proto.blockjoy.api.ui_v1.Host}
 */
proto.blockjoy.api.ui_v1.CreateHostRequest.prototype.getHost = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.Host} */ (
    jspb.Message.getWrapperField(this, common_pb.Host, 2));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.Host|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.CreateHostRequest} returns this
*/
proto.blockjoy.api.ui_v1.CreateHostRequest.prototype.setHost = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.CreateHostRequest} returns this
 */
proto.blockjoy.api.ui_v1.CreateHostRequest.prototype.clearHost = function() {
  return this.setHost(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.CreateHostRequest.prototype.hasHost = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockjoy.api.ui_v1.CreateHostResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.blockjoy.api.ui_v1.CreateHostResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockjoy.api.ui_v1.CreateHostResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.CreateHostResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    meta: (f = msg.getMeta()) && common_pb.ResponseMeta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockjoy.api.ui_v1.CreateHostResponse}
 */
proto.blockjoy.api.ui_v1.CreateHostResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockjoy.api.ui_v1.CreateHostResponse;
  return proto.blockjoy.api.ui_v1.CreateHostResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockjoy.api.ui_v1.CreateHostResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockjoy.api.ui_v1.CreateHostResponse}
 */
proto.blockjoy.api.ui_v1.CreateHostResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.ResponseMeta;
      reader.readMessage(value,common_pb.ResponseMeta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockjoy.api.ui_v1.CreateHostResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockjoy.api.ui_v1.CreateHostResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockjoy.api.ui_v1.CreateHostResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.CreateHostResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.ResponseMeta.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseMeta meta = 1;
 * @return {?proto.blockjoy.api.ui_v1.ResponseMeta}
 */
proto.blockjoy.api.ui_v1.CreateHostResponse.prototype.getMeta = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.ResponseMeta} */ (
    jspb.Message.getWrapperField(this, common_pb.ResponseMeta, 1));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.ResponseMeta|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.CreateHostResponse} returns this
*/
proto.blockjoy.api.ui_v1.CreateHostResponse.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.CreateHostResponse} returns this
 */
proto.blockjoy.api.ui_v1.CreateHostResponse.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.CreateHostResponse.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockjoy.api.ui_v1.UpdateHostRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.blockjoy.api.ui_v1.UpdateHostRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockjoy.api.ui_v1.UpdateHostRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.UpdateHostRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    meta: (f = msg.getMeta()) && common_pb.RequestMeta.toObject(includeInstance, f),
    host: (f = msg.getHost()) && common_pb.Host.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockjoy.api.ui_v1.UpdateHostRequest}
 */
proto.blockjoy.api.ui_v1.UpdateHostRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockjoy.api.ui_v1.UpdateHostRequest;
  return proto.blockjoy.api.ui_v1.UpdateHostRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockjoy.api.ui_v1.UpdateHostRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockjoy.api.ui_v1.UpdateHostRequest}
 */
proto.blockjoy.api.ui_v1.UpdateHostRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.RequestMeta;
      reader.readMessage(value,common_pb.RequestMeta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    case 2:
      var value = new common_pb.Host;
      reader.readMessage(value,common_pb.Host.deserializeBinaryFromReader);
      msg.setHost(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockjoy.api.ui_v1.UpdateHostRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockjoy.api.ui_v1.UpdateHostRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockjoy.api.ui_v1.UpdateHostRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.UpdateHostRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.RequestMeta.serializeBinaryToWriter
    );
  }
  f = message.getHost();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Host.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestMeta meta = 1;
 * @return {?proto.blockjoy.api.ui_v1.RequestMeta}
 */
proto.blockjoy.api.ui_v1.UpdateHostRequest.prototype.getMeta = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.RequestMeta} */ (
    jspb.Message.getWrapperField(this, common_pb.RequestMeta, 1));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.RequestMeta|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.UpdateHostRequest} returns this
*/
proto.blockjoy.api.ui_v1.UpdateHostRequest.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.UpdateHostRequest} returns this
 */
proto.blockjoy.api.ui_v1.UpdateHostRequest.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.UpdateHostRequest.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Host host = 2;
 * @return {?proto.blockjoy.api.ui_v1.Host}
 */
proto.blockjoy.api.ui_v1.UpdateHostRequest.prototype.getHost = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.Host} */ (
    jspb.Message.getWrapperField(this, common_pb.Host, 2));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.Host|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.UpdateHostRequest} returns this
*/
proto.blockjoy.api.ui_v1.UpdateHostRequest.prototype.setHost = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.UpdateHostRequest} returns this
 */
proto.blockjoy.api.ui_v1.UpdateHostRequest.prototype.clearHost = function() {
  return this.setHost(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.UpdateHostRequest.prototype.hasHost = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockjoy.api.ui_v1.UpdateHostResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.blockjoy.api.ui_v1.UpdateHostResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockjoy.api.ui_v1.UpdateHostResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.UpdateHostResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    meta: (f = msg.getMeta()) && common_pb.ResponseMeta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockjoy.api.ui_v1.UpdateHostResponse}
 */
proto.blockjoy.api.ui_v1.UpdateHostResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockjoy.api.ui_v1.UpdateHostResponse;
  return proto.blockjoy.api.ui_v1.UpdateHostResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockjoy.api.ui_v1.UpdateHostResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockjoy.api.ui_v1.UpdateHostResponse}
 */
proto.blockjoy.api.ui_v1.UpdateHostResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.ResponseMeta;
      reader.readMessage(value,common_pb.ResponseMeta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockjoy.api.ui_v1.UpdateHostResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockjoy.api.ui_v1.UpdateHostResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockjoy.api.ui_v1.UpdateHostResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.UpdateHostResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.ResponseMeta.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseMeta meta = 1;
 * @return {?proto.blockjoy.api.ui_v1.ResponseMeta}
 */
proto.blockjoy.api.ui_v1.UpdateHostResponse.prototype.getMeta = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.ResponseMeta} */ (
    jspb.Message.getWrapperField(this, common_pb.ResponseMeta, 1));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.ResponseMeta|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.UpdateHostResponse} returns this
*/
proto.blockjoy.api.ui_v1.UpdateHostResponse.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.UpdateHostResponse} returns this
 */
proto.blockjoy.api.ui_v1.UpdateHostResponse.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.UpdateHostResponse.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockjoy.api.ui_v1.DeleteHostRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.blockjoy.api.ui_v1.DeleteHostRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockjoy.api.ui_v1.DeleteHostRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.DeleteHostRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    meta: (f = msg.getMeta()) && common_pb.RequestMeta.toObject(includeInstance, f),
    id: (f = msg.getId()) && common_pb.Uuid.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockjoy.api.ui_v1.DeleteHostRequest}
 */
proto.blockjoy.api.ui_v1.DeleteHostRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockjoy.api.ui_v1.DeleteHostRequest;
  return proto.blockjoy.api.ui_v1.DeleteHostRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockjoy.api.ui_v1.DeleteHostRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockjoy.api.ui_v1.DeleteHostRequest}
 */
proto.blockjoy.api.ui_v1.DeleteHostRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.RequestMeta;
      reader.readMessage(value,common_pb.RequestMeta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    case 2:
      var value = new common_pb.Uuid;
      reader.readMessage(value,common_pb.Uuid.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockjoy.api.ui_v1.DeleteHostRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockjoy.api.ui_v1.DeleteHostRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockjoy.api.ui_v1.DeleteHostRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.DeleteHostRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.RequestMeta.serializeBinaryToWriter
    );
  }
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Uuid.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestMeta meta = 1;
 * @return {?proto.blockjoy.api.ui_v1.RequestMeta}
 */
proto.blockjoy.api.ui_v1.DeleteHostRequest.prototype.getMeta = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.RequestMeta} */ (
    jspb.Message.getWrapperField(this, common_pb.RequestMeta, 1));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.RequestMeta|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.DeleteHostRequest} returns this
*/
proto.blockjoy.api.ui_v1.DeleteHostRequest.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.DeleteHostRequest} returns this
 */
proto.blockjoy.api.ui_v1.DeleteHostRequest.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.DeleteHostRequest.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Uuid id = 2;
 * @return {?proto.blockjoy.api.ui_v1.Uuid}
 */
proto.blockjoy.api.ui_v1.DeleteHostRequest.prototype.getId = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.Uuid} */ (
    jspb.Message.getWrapperField(this, common_pb.Uuid, 2));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.Uuid|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.DeleteHostRequest} returns this
*/
proto.blockjoy.api.ui_v1.DeleteHostRequest.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.DeleteHostRequest} returns this
 */
proto.blockjoy.api.ui_v1.DeleteHostRequest.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.DeleteHostRequest.prototype.hasId = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockjoy.api.ui_v1.DeleteHostResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.blockjoy.api.ui_v1.DeleteHostResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockjoy.api.ui_v1.DeleteHostResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.DeleteHostResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    meta: (f = msg.getMeta()) && common_pb.ResponseMeta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockjoy.api.ui_v1.DeleteHostResponse}
 */
proto.blockjoy.api.ui_v1.DeleteHostResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockjoy.api.ui_v1.DeleteHostResponse;
  return proto.blockjoy.api.ui_v1.DeleteHostResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockjoy.api.ui_v1.DeleteHostResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockjoy.api.ui_v1.DeleteHostResponse}
 */
proto.blockjoy.api.ui_v1.DeleteHostResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.ResponseMeta;
      reader.readMessage(value,common_pb.ResponseMeta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockjoy.api.ui_v1.DeleteHostResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockjoy.api.ui_v1.DeleteHostResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockjoy.api.ui_v1.DeleteHostResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.DeleteHostResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.ResponseMeta.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseMeta meta = 1;
 * @return {?proto.blockjoy.api.ui_v1.ResponseMeta}
 */
proto.blockjoy.api.ui_v1.DeleteHostResponse.prototype.getMeta = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.ResponseMeta} */ (
    jspb.Message.getWrapperField(this, common_pb.ResponseMeta, 1));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.ResponseMeta|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.DeleteHostResponse} returns this
*/
proto.blockjoy.api.ui_v1.DeleteHostResponse.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.DeleteHostResponse} returns this
 */
proto.blockjoy.api.ui_v1.DeleteHostResponse.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.DeleteHostResponse.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.blockjoy.api.ui_v1);
