// source: user_service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
goog.exportSymbol('proto.blockjoy.api.ui_v1.CreateUserRequest', null, global);
goog.exportSymbol('proto.blockjoy.api.ui_v1.CreateUserResponse', null, global);
goog.exportSymbol('proto.blockjoy.api.ui_v1.GetConfigurationRequest', null, global);
goog.exportSymbol('proto.blockjoy.api.ui_v1.GetConfigurationResponse', null, global);
goog.exportSymbol('proto.blockjoy.api.ui_v1.GetUserRequest', null, global);
goog.exportSymbol('proto.blockjoy.api.ui_v1.GetUserResponse', null, global);
goog.exportSymbol('proto.blockjoy.api.ui_v1.UpsertConfigurationRequest', null, global);
goog.exportSymbol('proto.blockjoy.api.ui_v1.UpsertConfigurationResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockjoy.api.ui_v1.GetUserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockjoy.api.ui_v1.GetUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockjoy.api.ui_v1.GetUserRequest.displayName = 'proto.blockjoy.api.ui_v1.GetUserRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockjoy.api.ui_v1.GetUserResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockjoy.api.ui_v1.GetUserResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockjoy.api.ui_v1.GetUserResponse.displayName = 'proto.blockjoy.api.ui_v1.GetUserResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockjoy.api.ui_v1.CreateUserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockjoy.api.ui_v1.CreateUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockjoy.api.ui_v1.CreateUserRequest.displayName = 'proto.blockjoy.api.ui_v1.CreateUserRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockjoy.api.ui_v1.CreateUserResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockjoy.api.ui_v1.CreateUserResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockjoy.api.ui_v1.CreateUserResponse.displayName = 'proto.blockjoy.api.ui_v1.CreateUserResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockjoy.api.ui_v1.UpsertConfigurationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.blockjoy.api.ui_v1.UpsertConfigurationRequest.repeatedFields_, null);
};
goog.inherits(proto.blockjoy.api.ui_v1.UpsertConfigurationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockjoy.api.ui_v1.UpsertConfigurationRequest.displayName = 'proto.blockjoy.api.ui_v1.UpsertConfigurationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockjoy.api.ui_v1.UpsertConfigurationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockjoy.api.ui_v1.UpsertConfigurationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockjoy.api.ui_v1.UpsertConfigurationResponse.displayName = 'proto.blockjoy.api.ui_v1.UpsertConfigurationResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockjoy.api.ui_v1.GetConfigurationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockjoy.api.ui_v1.GetConfigurationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockjoy.api.ui_v1.GetConfigurationRequest.displayName = 'proto.blockjoy.api.ui_v1.GetConfigurationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockjoy.api.ui_v1.GetConfigurationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.blockjoy.api.ui_v1.GetConfigurationResponse.repeatedFields_, null);
};
goog.inherits(proto.blockjoy.api.ui_v1.GetConfigurationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockjoy.api.ui_v1.GetConfigurationResponse.displayName = 'proto.blockjoy.api.ui_v1.GetConfigurationResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockjoy.api.ui_v1.GetUserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.blockjoy.api.ui_v1.GetUserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockjoy.api.ui_v1.GetUserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.GetUserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    meta: (f = msg.getMeta()) && common_pb.RequestMeta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockjoy.api.ui_v1.GetUserRequest}
 */
proto.blockjoy.api.ui_v1.GetUserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockjoy.api.ui_v1.GetUserRequest;
  return proto.blockjoy.api.ui_v1.GetUserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockjoy.api.ui_v1.GetUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockjoy.api.ui_v1.GetUserRequest}
 */
proto.blockjoy.api.ui_v1.GetUserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.RequestMeta;
      reader.readMessage(value,common_pb.RequestMeta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockjoy.api.ui_v1.GetUserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockjoy.api.ui_v1.GetUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockjoy.api.ui_v1.GetUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.GetUserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.RequestMeta.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestMeta meta = 1;
 * @return {?proto.blockjoy.api.ui_v1.RequestMeta}
 */
proto.blockjoy.api.ui_v1.GetUserRequest.prototype.getMeta = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.RequestMeta} */ (
    jspb.Message.getWrapperField(this, common_pb.RequestMeta, 1));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.RequestMeta|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.GetUserRequest} returns this
*/
proto.blockjoy.api.ui_v1.GetUserRequest.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.GetUserRequest} returns this
 */
proto.blockjoy.api.ui_v1.GetUserRequest.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.GetUserRequest.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockjoy.api.ui_v1.GetUserResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.blockjoy.api.ui_v1.GetUserResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockjoy.api.ui_v1.GetUserResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.GetUserResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    meta: (f = msg.getMeta()) && common_pb.ResponseMeta.toObject(includeInstance, f),
    user: (f = msg.getUser()) && common_pb.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockjoy.api.ui_v1.GetUserResponse}
 */
proto.blockjoy.api.ui_v1.GetUserResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockjoy.api.ui_v1.GetUserResponse;
  return proto.blockjoy.api.ui_v1.GetUserResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockjoy.api.ui_v1.GetUserResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockjoy.api.ui_v1.GetUserResponse}
 */
proto.blockjoy.api.ui_v1.GetUserResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.ResponseMeta;
      reader.readMessage(value,common_pb.ResponseMeta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    case 2:
      var value = new common_pb.User;
      reader.readMessage(value,common_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockjoy.api.ui_v1.GetUserResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockjoy.api.ui_v1.GetUserResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockjoy.api.ui_v1.GetUserResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.GetUserResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.ResponseMeta.serializeBinaryToWriter
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseMeta meta = 1;
 * @return {?proto.blockjoy.api.ui_v1.ResponseMeta}
 */
proto.blockjoy.api.ui_v1.GetUserResponse.prototype.getMeta = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.ResponseMeta} */ (
    jspb.Message.getWrapperField(this, common_pb.ResponseMeta, 1));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.ResponseMeta|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.GetUserResponse} returns this
*/
proto.blockjoy.api.ui_v1.GetUserResponse.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.GetUserResponse} returns this
 */
proto.blockjoy.api.ui_v1.GetUserResponse.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.GetUserResponse.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional User user = 2;
 * @return {?proto.blockjoy.api.ui_v1.User}
 */
proto.blockjoy.api.ui_v1.GetUserResponse.prototype.getUser = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.User} */ (
    jspb.Message.getWrapperField(this, common_pb.User, 2));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.User|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.GetUserResponse} returns this
*/
proto.blockjoy.api.ui_v1.GetUserResponse.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.GetUserResponse} returns this
 */
proto.blockjoy.api.ui_v1.GetUserResponse.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.GetUserResponse.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockjoy.api.ui_v1.CreateUserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.blockjoy.api.ui_v1.CreateUserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockjoy.api.ui_v1.CreateUserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.CreateUserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    meta: (f = msg.getMeta()) && common_pb.RequestMeta.toObject(includeInstance, f),
    user: (f = msg.getUser()) && common_pb.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockjoy.api.ui_v1.CreateUserRequest}
 */
proto.blockjoy.api.ui_v1.CreateUserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockjoy.api.ui_v1.CreateUserRequest;
  return proto.blockjoy.api.ui_v1.CreateUserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockjoy.api.ui_v1.CreateUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockjoy.api.ui_v1.CreateUserRequest}
 */
proto.blockjoy.api.ui_v1.CreateUserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.RequestMeta;
      reader.readMessage(value,common_pb.RequestMeta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    case 2:
      var value = new common_pb.User;
      reader.readMessage(value,common_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockjoy.api.ui_v1.CreateUserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockjoy.api.ui_v1.CreateUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockjoy.api.ui_v1.CreateUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.CreateUserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.RequestMeta.serializeBinaryToWriter
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestMeta meta = 1;
 * @return {?proto.blockjoy.api.ui_v1.RequestMeta}
 */
proto.blockjoy.api.ui_v1.CreateUserRequest.prototype.getMeta = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.RequestMeta} */ (
    jspb.Message.getWrapperField(this, common_pb.RequestMeta, 1));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.RequestMeta|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.CreateUserRequest} returns this
*/
proto.blockjoy.api.ui_v1.CreateUserRequest.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.CreateUserRequest} returns this
 */
proto.blockjoy.api.ui_v1.CreateUserRequest.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.CreateUserRequest.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional User user = 2;
 * @return {?proto.blockjoy.api.ui_v1.User}
 */
proto.blockjoy.api.ui_v1.CreateUserRequest.prototype.getUser = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.User} */ (
    jspb.Message.getWrapperField(this, common_pb.User, 2));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.User|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.CreateUserRequest} returns this
*/
proto.blockjoy.api.ui_v1.CreateUserRequest.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.CreateUserRequest} returns this
 */
proto.blockjoy.api.ui_v1.CreateUserRequest.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.CreateUserRequest.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockjoy.api.ui_v1.CreateUserResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.blockjoy.api.ui_v1.CreateUserResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockjoy.api.ui_v1.CreateUserResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.CreateUserResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    meta: (f = msg.getMeta()) && common_pb.ResponseMeta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockjoy.api.ui_v1.CreateUserResponse}
 */
proto.blockjoy.api.ui_v1.CreateUserResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockjoy.api.ui_v1.CreateUserResponse;
  return proto.blockjoy.api.ui_v1.CreateUserResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockjoy.api.ui_v1.CreateUserResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockjoy.api.ui_v1.CreateUserResponse}
 */
proto.blockjoy.api.ui_v1.CreateUserResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.ResponseMeta;
      reader.readMessage(value,common_pb.ResponseMeta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockjoy.api.ui_v1.CreateUserResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockjoy.api.ui_v1.CreateUserResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockjoy.api.ui_v1.CreateUserResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.CreateUserResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.ResponseMeta.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseMeta meta = 1;
 * @return {?proto.blockjoy.api.ui_v1.ResponseMeta}
 */
proto.blockjoy.api.ui_v1.CreateUserResponse.prototype.getMeta = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.ResponseMeta} */ (
    jspb.Message.getWrapperField(this, common_pb.ResponseMeta, 1));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.ResponseMeta|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.CreateUserResponse} returns this
*/
proto.blockjoy.api.ui_v1.CreateUserResponse.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.CreateUserResponse} returns this
 */
proto.blockjoy.api.ui_v1.CreateUserResponse.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.CreateUserResponse.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.blockjoy.api.ui_v1.UpsertConfigurationRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockjoy.api.ui_v1.UpsertConfigurationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.blockjoy.api.ui_v1.UpsertConfigurationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockjoy.api.ui_v1.UpsertConfigurationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.UpsertConfigurationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    meta: (f = msg.getMeta()) && common_pb.RequestMeta.toObject(includeInstance, f),
    userId: (f = msg.getUserId()) && common_pb.Uuid.toObject(includeInstance, f),
    paramsList: jspb.Message.toObjectList(msg.getParamsList(),
    common_pb.UserConfigurationParameter.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockjoy.api.ui_v1.UpsertConfigurationRequest}
 */
proto.blockjoy.api.ui_v1.UpsertConfigurationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockjoy.api.ui_v1.UpsertConfigurationRequest;
  return proto.blockjoy.api.ui_v1.UpsertConfigurationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockjoy.api.ui_v1.UpsertConfigurationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockjoy.api.ui_v1.UpsertConfigurationRequest}
 */
proto.blockjoy.api.ui_v1.UpsertConfigurationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.RequestMeta;
      reader.readMessage(value,common_pb.RequestMeta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    case 2:
      var value = new common_pb.Uuid;
      reader.readMessage(value,common_pb.Uuid.deserializeBinaryFromReader);
      msg.setUserId(value);
      break;
    case 3:
      var value = new common_pb.UserConfigurationParameter;
      reader.readMessage(value,common_pb.UserConfigurationParameter.deserializeBinaryFromReader);
      msg.addParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockjoy.api.ui_v1.UpsertConfigurationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockjoy.api.ui_v1.UpsertConfigurationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockjoy.api.ui_v1.UpsertConfigurationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.UpsertConfigurationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.RequestMeta.serializeBinaryToWriter
    );
  }
  f = message.getUserId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Uuid.serializeBinaryToWriter
    );
  }
  f = message.getParamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      common_pb.UserConfigurationParameter.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestMeta meta = 1;
 * @return {?proto.blockjoy.api.ui_v1.RequestMeta}
 */
proto.blockjoy.api.ui_v1.UpsertConfigurationRequest.prototype.getMeta = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.RequestMeta} */ (
    jspb.Message.getWrapperField(this, common_pb.RequestMeta, 1));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.RequestMeta|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.UpsertConfigurationRequest} returns this
*/
proto.blockjoy.api.ui_v1.UpsertConfigurationRequest.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.UpsertConfigurationRequest} returns this
 */
proto.blockjoy.api.ui_v1.UpsertConfigurationRequest.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.UpsertConfigurationRequest.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Uuid user_id = 2;
 * @return {?proto.blockjoy.api.ui_v1.Uuid}
 */
proto.blockjoy.api.ui_v1.UpsertConfigurationRequest.prototype.getUserId = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.Uuid} */ (
    jspb.Message.getWrapperField(this, common_pb.Uuid, 2));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.Uuid|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.UpsertConfigurationRequest} returns this
*/
proto.blockjoy.api.ui_v1.UpsertConfigurationRequest.prototype.setUserId = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.UpsertConfigurationRequest} returns this
 */
proto.blockjoy.api.ui_v1.UpsertConfigurationRequest.prototype.clearUserId = function() {
  return this.setUserId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.UpsertConfigurationRequest.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated UserConfigurationParameter params = 3;
 * @return {!Array<!proto.blockjoy.api.ui_v1.UserConfigurationParameter>}
 */
proto.blockjoy.api.ui_v1.UpsertConfigurationRequest.prototype.getParamsList = function() {
  return /** @type{!Array<!proto.blockjoy.api.ui_v1.UserConfigurationParameter>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.UserConfigurationParameter, 3));
};


/**
 * @param {!Array<!proto.blockjoy.api.ui_v1.UserConfigurationParameter>} value
 * @return {!proto.blockjoy.api.ui_v1.UpsertConfigurationRequest} returns this
*/
proto.blockjoy.api.ui_v1.UpsertConfigurationRequest.prototype.setParamsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.blockjoy.api.ui_v1.UserConfigurationParameter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.blockjoy.api.ui_v1.UserConfigurationParameter}
 */
proto.blockjoy.api.ui_v1.UpsertConfigurationRequest.prototype.addParams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.blockjoy.api.ui_v1.UserConfigurationParameter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.blockjoy.api.ui_v1.UpsertConfigurationRequest} returns this
 */
proto.blockjoy.api.ui_v1.UpsertConfigurationRequest.prototype.clearParamsList = function() {
  return this.setParamsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockjoy.api.ui_v1.UpsertConfigurationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.blockjoy.api.ui_v1.UpsertConfigurationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockjoy.api.ui_v1.UpsertConfigurationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.UpsertConfigurationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    meta: (f = msg.getMeta()) && common_pb.ResponseMeta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockjoy.api.ui_v1.UpsertConfigurationResponse}
 */
proto.blockjoy.api.ui_v1.UpsertConfigurationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockjoy.api.ui_v1.UpsertConfigurationResponse;
  return proto.blockjoy.api.ui_v1.UpsertConfigurationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockjoy.api.ui_v1.UpsertConfigurationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockjoy.api.ui_v1.UpsertConfigurationResponse}
 */
proto.blockjoy.api.ui_v1.UpsertConfigurationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.ResponseMeta;
      reader.readMessage(value,common_pb.ResponseMeta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockjoy.api.ui_v1.UpsertConfigurationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockjoy.api.ui_v1.UpsertConfigurationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockjoy.api.ui_v1.UpsertConfigurationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.UpsertConfigurationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.ResponseMeta.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseMeta meta = 1;
 * @return {?proto.blockjoy.api.ui_v1.ResponseMeta}
 */
proto.blockjoy.api.ui_v1.UpsertConfigurationResponse.prototype.getMeta = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.ResponseMeta} */ (
    jspb.Message.getWrapperField(this, common_pb.ResponseMeta, 1));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.ResponseMeta|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.UpsertConfigurationResponse} returns this
*/
proto.blockjoy.api.ui_v1.UpsertConfigurationResponse.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.UpsertConfigurationResponse} returns this
 */
proto.blockjoy.api.ui_v1.UpsertConfigurationResponse.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.UpsertConfigurationResponse.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockjoy.api.ui_v1.GetConfigurationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.blockjoy.api.ui_v1.GetConfigurationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockjoy.api.ui_v1.GetConfigurationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.GetConfigurationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    meta: (f = msg.getMeta()) && common_pb.RequestMeta.toObject(includeInstance, f),
    userId: (f = msg.getUserId()) && common_pb.Uuid.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockjoy.api.ui_v1.GetConfigurationRequest}
 */
proto.blockjoy.api.ui_v1.GetConfigurationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockjoy.api.ui_v1.GetConfigurationRequest;
  return proto.blockjoy.api.ui_v1.GetConfigurationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockjoy.api.ui_v1.GetConfigurationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockjoy.api.ui_v1.GetConfigurationRequest}
 */
proto.blockjoy.api.ui_v1.GetConfigurationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.RequestMeta;
      reader.readMessage(value,common_pb.RequestMeta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    case 2:
      var value = new common_pb.Uuid;
      reader.readMessage(value,common_pb.Uuid.deserializeBinaryFromReader);
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockjoy.api.ui_v1.GetConfigurationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockjoy.api.ui_v1.GetConfigurationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockjoy.api.ui_v1.GetConfigurationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.GetConfigurationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.RequestMeta.serializeBinaryToWriter
    );
  }
  f = message.getUserId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Uuid.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestMeta meta = 1;
 * @return {?proto.blockjoy.api.ui_v1.RequestMeta}
 */
proto.blockjoy.api.ui_v1.GetConfigurationRequest.prototype.getMeta = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.RequestMeta} */ (
    jspb.Message.getWrapperField(this, common_pb.RequestMeta, 1));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.RequestMeta|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.GetConfigurationRequest} returns this
*/
proto.blockjoy.api.ui_v1.GetConfigurationRequest.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.GetConfigurationRequest} returns this
 */
proto.blockjoy.api.ui_v1.GetConfigurationRequest.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.GetConfigurationRequest.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Uuid user_id = 2;
 * @return {?proto.blockjoy.api.ui_v1.Uuid}
 */
proto.blockjoy.api.ui_v1.GetConfigurationRequest.prototype.getUserId = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.Uuid} */ (
    jspb.Message.getWrapperField(this, common_pb.Uuid, 2));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.Uuid|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.GetConfigurationRequest} returns this
*/
proto.blockjoy.api.ui_v1.GetConfigurationRequest.prototype.setUserId = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.GetConfigurationRequest} returns this
 */
proto.blockjoy.api.ui_v1.GetConfigurationRequest.prototype.clearUserId = function() {
  return this.setUserId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.GetConfigurationRequest.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.blockjoy.api.ui_v1.GetConfigurationResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockjoy.api.ui_v1.GetConfigurationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.blockjoy.api.ui_v1.GetConfigurationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockjoy.api.ui_v1.GetConfigurationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.GetConfigurationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    meta: (f = msg.getMeta()) && common_pb.ResponseMeta.toObject(includeInstance, f),
    paramsList: jspb.Message.toObjectList(msg.getParamsList(),
    common_pb.UserConfigurationParameter.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockjoy.api.ui_v1.GetConfigurationResponse}
 */
proto.blockjoy.api.ui_v1.GetConfigurationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockjoy.api.ui_v1.GetConfigurationResponse;
  return proto.blockjoy.api.ui_v1.GetConfigurationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockjoy.api.ui_v1.GetConfigurationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockjoy.api.ui_v1.GetConfigurationResponse}
 */
proto.blockjoy.api.ui_v1.GetConfigurationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.ResponseMeta;
      reader.readMessage(value,common_pb.ResponseMeta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    case 2:
      var value = new common_pb.UserConfigurationParameter;
      reader.readMessage(value,common_pb.UserConfigurationParameter.deserializeBinaryFromReader);
      msg.addParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockjoy.api.ui_v1.GetConfigurationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockjoy.api.ui_v1.GetConfigurationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockjoy.api.ui_v1.GetConfigurationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.GetConfigurationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.ResponseMeta.serializeBinaryToWriter
    );
  }
  f = message.getParamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      common_pb.UserConfigurationParameter.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseMeta meta = 1;
 * @return {?proto.blockjoy.api.ui_v1.ResponseMeta}
 */
proto.blockjoy.api.ui_v1.GetConfigurationResponse.prototype.getMeta = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.ResponseMeta} */ (
    jspb.Message.getWrapperField(this, common_pb.ResponseMeta, 1));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.ResponseMeta|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.GetConfigurationResponse} returns this
*/
proto.blockjoy.api.ui_v1.GetConfigurationResponse.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.GetConfigurationResponse} returns this
 */
proto.blockjoy.api.ui_v1.GetConfigurationResponse.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.GetConfigurationResponse.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated UserConfigurationParameter params = 2;
 * @return {!Array<!proto.blockjoy.api.ui_v1.UserConfigurationParameter>}
 */
proto.blockjoy.api.ui_v1.GetConfigurationResponse.prototype.getParamsList = function() {
  return /** @type{!Array<!proto.blockjoy.api.ui_v1.UserConfigurationParameter>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.UserConfigurationParameter, 2));
};


/**
 * @param {!Array<!proto.blockjoy.api.ui_v1.UserConfigurationParameter>} value
 * @return {!proto.blockjoy.api.ui_v1.GetConfigurationResponse} returns this
*/
proto.blockjoy.api.ui_v1.GetConfigurationResponse.prototype.setParamsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.blockjoy.api.ui_v1.UserConfigurationParameter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.blockjoy.api.ui_v1.UserConfigurationParameter}
 */
proto.blockjoy.api.ui_v1.GetConfigurationResponse.prototype.addParams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.blockjoy.api.ui_v1.UserConfigurationParameter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.blockjoy.api.ui_v1.GetConfigurationResponse} returns this
 */
proto.blockjoy.api.ui_v1.GetConfigurationResponse.prototype.clearParamsList = function() {
  return this.setParamsList([]);
};


goog.object.extend(exports, proto.blockjoy.api.ui_v1);
