// source: common.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
goog.exportSymbol('proto.blockjoy.api.ui_v1.ApiToken', null, global);
goog.exportSymbol('proto.blockjoy.api.ui_v1.Bill', null, global);
goog.exportSymbol('proto.blockjoy.api.ui_v1.Host', null, global);
goog.exportSymbol('proto.blockjoy.api.ui_v1.Host.HostStatus', null, global);
goog.exportSymbol('proto.blockjoy.api.ui_v1.HostProvision', null, global);
goog.exportSymbol('proto.blockjoy.api.ui_v1.InfoUpdate', null, global);
goog.exportSymbol('proto.blockjoy.api.ui_v1.KPI', null, global);
goog.exportSymbol('proto.blockjoy.api.ui_v1.KPI.Name', null, global);
goog.exportSymbol('proto.blockjoy.api.ui_v1.Node', null, global);
goog.exportSymbol('proto.blockjoy.api.ui_v1.Node.NodeStatus', null, global);
goog.exportSymbol('proto.blockjoy.api.ui_v1.Node.NodeType', null, global);
goog.exportSymbol('proto.blockjoy.api.ui_v1.Organization', null, global);
goog.exportSymbol('proto.blockjoy.api.ui_v1.Pagination', null, global);
goog.exportSymbol('proto.blockjoy.api.ui_v1.RequestMeta', null, global);
goog.exportSymbol('proto.blockjoy.api.ui_v1.ResponseMeta', null, global);
goog.exportSymbol('proto.blockjoy.api.ui_v1.ResponseMeta.Status', null, global);
goog.exportSymbol('proto.blockjoy.api.ui_v1.User', null, global);
goog.exportSymbol('proto.blockjoy.api.ui_v1.UserConfigurationParameter', null, global);
goog.exportSymbol('proto.blockjoy.api.ui_v1.Uuid', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockjoy.api.ui_v1.Uuid = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockjoy.api.ui_v1.Uuid, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockjoy.api.ui_v1.Uuid.displayName = 'proto.blockjoy.api.ui_v1.Uuid';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockjoy.api.ui_v1.ApiToken = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockjoy.api.ui_v1.ApiToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockjoy.api.ui_v1.ApiToken.displayName = 'proto.blockjoy.api.ui_v1.ApiToken';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockjoy.api.ui_v1.Pagination = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockjoy.api.ui_v1.Pagination, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockjoy.api.ui_v1.Pagination.displayName = 'proto.blockjoy.api.ui_v1.Pagination';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockjoy.api.ui_v1.RequestMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.blockjoy.api.ui_v1.RequestMeta.repeatedFields_, null);
};
goog.inherits(proto.blockjoy.api.ui_v1.RequestMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockjoy.api.ui_v1.RequestMeta.displayName = 'proto.blockjoy.api.ui_v1.RequestMeta';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockjoy.api.ui_v1.ResponseMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.blockjoy.api.ui_v1.ResponseMeta.repeatedFields_, null);
};
goog.inherits(proto.blockjoy.api.ui_v1.ResponseMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockjoy.api.ui_v1.ResponseMeta.displayName = 'proto.blockjoy.api.ui_v1.ResponseMeta';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockjoy.api.ui_v1.Host = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.blockjoy.api.ui_v1.Host.repeatedFields_, null);
};
goog.inherits(proto.blockjoy.api.ui_v1.Host, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockjoy.api.ui_v1.Host.displayName = 'proto.blockjoy.api.ui_v1.Host';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockjoy.api.ui_v1.HostProvision = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockjoy.api.ui_v1.HostProvision, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockjoy.api.ui_v1.HostProvision.displayName = 'proto.blockjoy.api.ui_v1.HostProvision';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockjoy.api.ui_v1.Node = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.blockjoy.api.ui_v1.Node.repeatedFields_, null);
};
goog.inherits(proto.blockjoy.api.ui_v1.Node, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockjoy.api.ui_v1.Node.displayName = 'proto.blockjoy.api.ui_v1.Node';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockjoy.api.ui_v1.Organization = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockjoy.api.ui_v1.Organization, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockjoy.api.ui_v1.Organization.displayName = 'proto.blockjoy.api.ui_v1.Organization';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockjoy.api.ui_v1.InfoUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockjoy.api.ui_v1.InfoUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockjoy.api.ui_v1.InfoUpdate.displayName = 'proto.blockjoy.api.ui_v1.InfoUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockjoy.api.ui_v1.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockjoy.api.ui_v1.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockjoy.api.ui_v1.User.displayName = 'proto.blockjoy.api.ui_v1.User';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockjoy.api.ui_v1.Bill = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockjoy.api.ui_v1.Bill, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockjoy.api.ui_v1.Bill.displayName = 'proto.blockjoy.api.ui_v1.Bill';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockjoy.api.ui_v1.KPI = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockjoy.api.ui_v1.KPI, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockjoy.api.ui_v1.KPI.displayName = 'proto.blockjoy.api.ui_v1.KPI';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockjoy.api.ui_v1.UserConfigurationParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockjoy.api.ui_v1.UserConfigurationParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockjoy.api.ui_v1.UserConfigurationParameter.displayName = 'proto.blockjoy.api.ui_v1.UserConfigurationParameter';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockjoy.api.ui_v1.Uuid.prototype.toObject = function(opt_includeInstance) {
  return proto.blockjoy.api.ui_v1.Uuid.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockjoy.api.ui_v1.Uuid} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.Uuid.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockjoy.api.ui_v1.Uuid}
 */
proto.blockjoy.api.ui_v1.Uuid.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockjoy.api.ui_v1.Uuid;
  return proto.blockjoy.api.ui_v1.Uuid.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockjoy.api.ui_v1.Uuid} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockjoy.api.ui_v1.Uuid}
 */
proto.blockjoy.api.ui_v1.Uuid.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockjoy.api.ui_v1.Uuid.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockjoy.api.ui_v1.Uuid.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockjoy.api.ui_v1.Uuid} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.Uuid.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string value = 1;
 * @return {string}
 */
proto.blockjoy.api.ui_v1.Uuid.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.blockjoy.api.ui_v1.Uuid} returns this
 */
proto.blockjoy.api.ui_v1.Uuid.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockjoy.api.ui_v1.ApiToken.prototype.toObject = function(opt_includeInstance) {
  return proto.blockjoy.api.ui_v1.ApiToken.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockjoy.api.ui_v1.ApiToken} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.ApiToken.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockjoy.api.ui_v1.ApiToken}
 */
proto.blockjoy.api.ui_v1.ApiToken.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockjoy.api.ui_v1.ApiToken;
  return proto.blockjoy.api.ui_v1.ApiToken.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockjoy.api.ui_v1.ApiToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockjoy.api.ui_v1.ApiToken}
 */
proto.blockjoy.api.ui_v1.ApiToken.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockjoy.api.ui_v1.ApiToken.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockjoy.api.ui_v1.ApiToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockjoy.api.ui_v1.ApiToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.ApiToken.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string value = 1;
 * @return {string}
 */
proto.blockjoy.api.ui_v1.ApiToken.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.blockjoy.api.ui_v1.ApiToken} returns this
 */
proto.blockjoy.api.ui_v1.ApiToken.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockjoy.api.ui_v1.Pagination.prototype.toObject = function(opt_includeInstance) {
  return proto.blockjoy.api.ui_v1.Pagination.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockjoy.api.ui_v1.Pagination} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.Pagination.toObject = function(includeInstance, msg) {
  var f, obj = {
    count: jspb.Message.getFieldWithDefault(msg, 1, 0),
    max: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockjoy.api.ui_v1.Pagination}
 */
proto.blockjoy.api.ui_v1.Pagination.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockjoy.api.ui_v1.Pagination;
  return proto.blockjoy.api.ui_v1.Pagination.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockjoy.api.ui_v1.Pagination} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockjoy.api.ui_v1.Pagination}
 */
proto.blockjoy.api.ui_v1.Pagination.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMax(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockjoy.api.ui_v1.Pagination.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockjoy.api.ui_v1.Pagination.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockjoy.api.ui_v1.Pagination} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.Pagination.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMax();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 count = 1;
 * @return {number}
 */
proto.blockjoy.api.ui_v1.Pagination.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.blockjoy.api.ui_v1.Pagination} returns this
 */
proto.blockjoy.api.ui_v1.Pagination.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 max = 2;
 * @return {number}
 */
proto.blockjoy.api.ui_v1.Pagination.prototype.getMax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.blockjoy.api.ui_v1.Pagination} returns this
 */
proto.blockjoy.api.ui_v1.Pagination.prototype.setMax = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.blockjoy.api.ui_v1.RequestMeta.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockjoy.api.ui_v1.RequestMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.blockjoy.api.ui_v1.RequestMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockjoy.api.ui_v1.RequestMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.RequestMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.blockjoy.api.ui_v1.Uuid.toObject(includeInstance, f),
    token: (f = msg.getToken()) && proto.blockjoy.api.ui_v1.ApiToken.toObject(includeInstance, f),
    fieldsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    count: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockjoy.api.ui_v1.RequestMeta}
 */
proto.blockjoy.api.ui_v1.RequestMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockjoy.api.ui_v1.RequestMeta;
  return proto.blockjoy.api.ui_v1.RequestMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockjoy.api.ui_v1.RequestMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockjoy.api.ui_v1.RequestMeta}
 */
proto.blockjoy.api.ui_v1.RequestMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.blockjoy.api.ui_v1.Uuid;
      reader.readMessage(value,proto.blockjoy.api.ui_v1.Uuid.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new proto.blockjoy.api.ui_v1.ApiToken;
      reader.readMessage(value,proto.blockjoy.api.ui_v1.ApiToken.deserializeBinaryFromReader);
      msg.setToken(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addFields(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockjoy.api.ui_v1.RequestMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockjoy.api.ui_v1.RequestMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockjoy.api.ui_v1.RequestMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.RequestMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.blockjoy.api.ui_v1.Uuid.serializeBinaryToWriter
    );
  }
  f = message.getToken();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.blockjoy.api.ui_v1.ApiToken.serializeBinaryToWriter
    );
  }
  f = message.getFieldsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional Uuid id = 1;
 * @return {?proto.blockjoy.api.ui_v1.Uuid}
 */
proto.blockjoy.api.ui_v1.RequestMeta.prototype.getId = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.Uuid} */ (
    jspb.Message.getWrapperField(this, proto.blockjoy.api.ui_v1.Uuid, 1));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.Uuid|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.RequestMeta} returns this
*/
proto.blockjoy.api.ui_v1.RequestMeta.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.RequestMeta} returns this
 */
proto.blockjoy.api.ui_v1.RequestMeta.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.RequestMeta.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ApiToken token = 2;
 * @return {?proto.blockjoy.api.ui_v1.ApiToken}
 */
proto.blockjoy.api.ui_v1.RequestMeta.prototype.getToken = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.ApiToken} */ (
    jspb.Message.getWrapperField(this, proto.blockjoy.api.ui_v1.ApiToken, 2));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.ApiToken|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.RequestMeta} returns this
*/
proto.blockjoy.api.ui_v1.RequestMeta.prototype.setToken = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.RequestMeta} returns this
 */
proto.blockjoy.api.ui_v1.RequestMeta.prototype.clearToken = function() {
  return this.setToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.RequestMeta.prototype.hasToken = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated string fields = 3;
 * @return {!Array<string>}
 */
proto.blockjoy.api.ui_v1.RequestMeta.prototype.getFieldsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.blockjoy.api.ui_v1.RequestMeta} returns this
 */
proto.blockjoy.api.ui_v1.RequestMeta.prototype.setFieldsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.blockjoy.api.ui_v1.RequestMeta} returns this
 */
proto.blockjoy.api.ui_v1.RequestMeta.prototype.addFields = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.blockjoy.api.ui_v1.RequestMeta} returns this
 */
proto.blockjoy.api.ui_v1.RequestMeta.prototype.clearFieldsList = function() {
  return this.setFieldsList([]);
};


/**
 * optional int32 count = 4;
 * @return {number}
 */
proto.blockjoy.api.ui_v1.RequestMeta.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.blockjoy.api.ui_v1.RequestMeta} returns this
 */
proto.blockjoy.api.ui_v1.RequestMeta.prototype.setCount = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.RequestMeta} returns this
 */
proto.blockjoy.api.ui_v1.RequestMeta.prototype.clearCount = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.RequestMeta.prototype.hasCount = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.blockjoy.api.ui_v1.ResponseMeta.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockjoy.api.ui_v1.ResponseMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.blockjoy.api.ui_v1.ResponseMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockjoy.api.ui_v1.ResponseMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.ResponseMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    originRequestId: (f = msg.getOriginRequestId()) && proto.blockjoy.api.ui_v1.Uuid.toObject(includeInstance, f),
    messagesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    pagination: (f = msg.getPagination()) && proto.blockjoy.api.ui_v1.Pagination.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockjoy.api.ui_v1.ResponseMeta}
 */
proto.blockjoy.api.ui_v1.ResponseMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockjoy.api.ui_v1.ResponseMeta;
  return proto.blockjoy.api.ui_v1.ResponseMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockjoy.api.ui_v1.ResponseMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockjoy.api.ui_v1.ResponseMeta}
 */
proto.blockjoy.api.ui_v1.ResponseMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.blockjoy.api.ui_v1.ResponseMeta.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = new proto.blockjoy.api.ui_v1.Uuid;
      reader.readMessage(value,proto.blockjoy.api.ui_v1.Uuid.deserializeBinaryFromReader);
      msg.setOriginRequestId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addMessages(value);
      break;
    case 4:
      var value = new proto.blockjoy.api.ui_v1.Pagination;
      reader.readMessage(value,proto.blockjoy.api.ui_v1.Pagination.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockjoy.api.ui_v1.ResponseMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockjoy.api.ui_v1.ResponseMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockjoy.api.ui_v1.ResponseMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.ResponseMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getOriginRequestId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.blockjoy.api.ui_v1.Uuid.serializeBinaryToWriter
    );
  }
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.blockjoy.api.ui_v1.Pagination.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.blockjoy.api.ui_v1.ResponseMeta.Status = {
  UNKNOWNRESPONSE: 0,
  SUCCESS: 1,
  GENERALERROR: 2
};

/**
 * optional Status status = 1;
 * @return {!proto.blockjoy.api.ui_v1.ResponseMeta.Status}
 */
proto.blockjoy.api.ui_v1.ResponseMeta.prototype.getStatus = function() {
  return /** @type {!proto.blockjoy.api.ui_v1.ResponseMeta.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.blockjoy.api.ui_v1.ResponseMeta.Status} value
 * @return {!proto.blockjoy.api.ui_v1.ResponseMeta} returns this
 */
proto.blockjoy.api.ui_v1.ResponseMeta.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Uuid origin_request_id = 2;
 * @return {?proto.blockjoy.api.ui_v1.Uuid}
 */
proto.blockjoy.api.ui_v1.ResponseMeta.prototype.getOriginRequestId = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.Uuid} */ (
    jspb.Message.getWrapperField(this, proto.blockjoy.api.ui_v1.Uuid, 2));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.Uuid|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.ResponseMeta} returns this
*/
proto.blockjoy.api.ui_v1.ResponseMeta.prototype.setOriginRequestId = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.ResponseMeta} returns this
 */
proto.blockjoy.api.ui_v1.ResponseMeta.prototype.clearOriginRequestId = function() {
  return this.setOriginRequestId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.ResponseMeta.prototype.hasOriginRequestId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated string messages = 3;
 * @return {!Array<string>}
 */
proto.blockjoy.api.ui_v1.ResponseMeta.prototype.getMessagesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.blockjoy.api.ui_v1.ResponseMeta} returns this
 */
proto.blockjoy.api.ui_v1.ResponseMeta.prototype.setMessagesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.blockjoy.api.ui_v1.ResponseMeta} returns this
 */
proto.blockjoy.api.ui_v1.ResponseMeta.prototype.addMessages = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.blockjoy.api.ui_v1.ResponseMeta} returns this
 */
proto.blockjoy.api.ui_v1.ResponseMeta.prototype.clearMessagesList = function() {
  return this.setMessagesList([]);
};


/**
 * optional Pagination pagination = 4;
 * @return {?proto.blockjoy.api.ui_v1.Pagination}
 */
proto.blockjoy.api.ui_v1.ResponseMeta.prototype.getPagination = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.Pagination} */ (
    jspb.Message.getWrapperField(this, proto.blockjoy.api.ui_v1.Pagination, 4));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.Pagination|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.ResponseMeta} returns this
*/
proto.blockjoy.api.ui_v1.ResponseMeta.prototype.setPagination = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.ResponseMeta} returns this
 */
proto.blockjoy.api.ui_v1.ResponseMeta.prototype.clearPagination = function() {
  return this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.ResponseMeta.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.blockjoy.api.ui_v1.Host.repeatedFields_ = [13];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockjoy.api.ui_v1.Host.prototype.toObject = function(opt_includeInstance) {
  return proto.blockjoy.api.ui_v1.Host.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockjoy.api.ui_v1.Host} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.Host.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.blockjoy.api.ui_v1.Uuid.toObject(includeInstance, f),
    orgId: (f = msg.getOrgId()) && proto.blockjoy.api.ui_v1.Uuid.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    version: jspb.Message.getFieldWithDefault(msg, 4, ""),
    location: jspb.Message.getFieldWithDefault(msg, 5, ""),
    cpuCount: jspb.Message.getFieldWithDefault(msg, 6, 0),
    memSize: jspb.Message.getFieldWithDefault(msg, 7, 0),
    diskSize: jspb.Message.getFieldWithDefault(msg, 8, 0),
    os: jspb.Message.getFieldWithDefault(msg, 9, ""),
    osVersion: jspb.Message.getFieldWithDefault(msg, 10, ""),
    ip: jspb.Message.getFieldWithDefault(msg, 11, ""),
    status: jspb.Message.getFieldWithDefault(msg, 12, 0),
    nodesList: jspb.Message.toObjectList(msg.getNodesList(),
    proto.blockjoy.api.ui_v1.Node.toObject, includeInstance),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockjoy.api.ui_v1.Host}
 */
proto.blockjoy.api.ui_v1.Host.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockjoy.api.ui_v1.Host;
  return proto.blockjoy.api.ui_v1.Host.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockjoy.api.ui_v1.Host} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockjoy.api.ui_v1.Host}
 */
proto.blockjoy.api.ui_v1.Host.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.blockjoy.api.ui_v1.Uuid;
      reader.readMessage(value,proto.blockjoy.api.ui_v1.Uuid.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new proto.blockjoy.api.ui_v1.Uuid;
      reader.readMessage(value,proto.blockjoy.api.ui_v1.Uuid.deserializeBinaryFromReader);
      msg.setOrgId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocation(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCpuCount(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMemSize(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDiskSize(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setOs(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setOsVersion(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 12:
      var value = /** @type {!proto.blockjoy.api.ui_v1.Host.HostStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 13:
      var value = new proto.blockjoy.api.ui_v1.Node;
      reader.readMessage(value,proto.blockjoy.api.ui_v1.Node.deserializeBinaryFromReader);
      msg.addNodes(value);
      break;
    case 14:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockjoy.api.ui_v1.Host.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockjoy.api.ui_v1.Host.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockjoy.api.ui_v1.Host} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.Host.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.blockjoy.api.ui_v1.Uuid.serializeBinaryToWriter
    );
  }
  f = message.getOrgId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.blockjoy.api.ui_v1.Uuid.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {!proto.blockjoy.api.ui_v1.Host.HostStatus} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeEnum(
      12,
      f
    );
  }
  f = message.getNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      proto.blockjoy.api.ui_v1.Node.serializeBinaryToWriter
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.blockjoy.api.ui_v1.Host.HostStatus = {
  UNDEFINEDCONTAINERSTATUS: 0,
  CREATING: 1,
  RUNNING: 2,
  STARTING: 3,
  STOPPING: 4,
  STOPPED: 5,
  UPGRADING: 6,
  UPGRADED: 7,
  DELETING: 8,
  DELETED: 9,
  INSTALLING: 10,
  SNAPSHOTTING: 11
};

/**
 * optional Uuid id = 1;
 * @return {?proto.blockjoy.api.ui_v1.Uuid}
 */
proto.blockjoy.api.ui_v1.Host.prototype.getId = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.Uuid} */ (
    jspb.Message.getWrapperField(this, proto.blockjoy.api.ui_v1.Uuid, 1));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.Uuid|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.Host} returns this
*/
proto.blockjoy.api.ui_v1.Host.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.Host} returns this
 */
proto.blockjoy.api.ui_v1.Host.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.Host.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Uuid org_id = 2;
 * @return {?proto.blockjoy.api.ui_v1.Uuid}
 */
proto.blockjoy.api.ui_v1.Host.prototype.getOrgId = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.Uuid} */ (
    jspb.Message.getWrapperField(this, proto.blockjoy.api.ui_v1.Uuid, 2));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.Uuid|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.Host} returns this
*/
proto.blockjoy.api.ui_v1.Host.prototype.setOrgId = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.Host} returns this
 */
proto.blockjoy.api.ui_v1.Host.prototype.clearOrgId = function() {
  return this.setOrgId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.Host.prototype.hasOrgId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.blockjoy.api.ui_v1.Host.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.blockjoy.api.ui_v1.Host} returns this
 */
proto.blockjoy.api.ui_v1.Host.prototype.setName = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.Host} returns this
 */
proto.blockjoy.api.ui_v1.Host.prototype.clearName = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.Host.prototype.hasName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string version = 4;
 * @return {string}
 */
proto.blockjoy.api.ui_v1.Host.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.blockjoy.api.ui_v1.Host} returns this
 */
proto.blockjoy.api.ui_v1.Host.prototype.setVersion = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.Host} returns this
 */
proto.blockjoy.api.ui_v1.Host.prototype.clearVersion = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.Host.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string location = 5;
 * @return {string}
 */
proto.blockjoy.api.ui_v1.Host.prototype.getLocation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.blockjoy.api.ui_v1.Host} returns this
 */
proto.blockjoy.api.ui_v1.Host.prototype.setLocation = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.Host} returns this
 */
proto.blockjoy.api.ui_v1.Host.prototype.clearLocation = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.Host.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int64 cpu_count = 6;
 * @return {number}
 */
proto.blockjoy.api.ui_v1.Host.prototype.getCpuCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.blockjoy.api.ui_v1.Host} returns this
 */
proto.blockjoy.api.ui_v1.Host.prototype.setCpuCount = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.Host} returns this
 */
proto.blockjoy.api.ui_v1.Host.prototype.clearCpuCount = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.Host.prototype.hasCpuCount = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int64 mem_size = 7;
 * @return {number}
 */
proto.blockjoy.api.ui_v1.Host.prototype.getMemSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.blockjoy.api.ui_v1.Host} returns this
 */
proto.blockjoy.api.ui_v1.Host.prototype.setMemSize = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.Host} returns this
 */
proto.blockjoy.api.ui_v1.Host.prototype.clearMemSize = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.Host.prototype.hasMemSize = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int64 disk_size = 8;
 * @return {number}
 */
proto.blockjoy.api.ui_v1.Host.prototype.getDiskSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.blockjoy.api.ui_v1.Host} returns this
 */
proto.blockjoy.api.ui_v1.Host.prototype.setDiskSize = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.Host} returns this
 */
proto.blockjoy.api.ui_v1.Host.prototype.clearDiskSize = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.Host.prototype.hasDiskSize = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string os = 9;
 * @return {string}
 */
proto.blockjoy.api.ui_v1.Host.prototype.getOs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.blockjoy.api.ui_v1.Host} returns this
 */
proto.blockjoy.api.ui_v1.Host.prototype.setOs = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.Host} returns this
 */
proto.blockjoy.api.ui_v1.Host.prototype.clearOs = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.Host.prototype.hasOs = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string os_version = 10;
 * @return {string}
 */
proto.blockjoy.api.ui_v1.Host.prototype.getOsVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.blockjoy.api.ui_v1.Host} returns this
 */
proto.blockjoy.api.ui_v1.Host.prototype.setOsVersion = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.Host} returns this
 */
proto.blockjoy.api.ui_v1.Host.prototype.clearOsVersion = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.Host.prototype.hasOsVersion = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string ip = 11;
 * @return {string}
 */
proto.blockjoy.api.ui_v1.Host.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.blockjoy.api.ui_v1.Host} returns this
 */
proto.blockjoy.api.ui_v1.Host.prototype.setIp = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.Host} returns this
 */
proto.blockjoy.api.ui_v1.Host.prototype.clearIp = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.Host.prototype.hasIp = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional HostStatus status = 12;
 * @return {!proto.blockjoy.api.ui_v1.Host.HostStatus}
 */
proto.blockjoy.api.ui_v1.Host.prototype.getStatus = function() {
  return /** @type {!proto.blockjoy.api.ui_v1.Host.HostStatus} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {!proto.blockjoy.api.ui_v1.Host.HostStatus} value
 * @return {!proto.blockjoy.api.ui_v1.Host} returns this
 */
proto.blockjoy.api.ui_v1.Host.prototype.setStatus = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.Host} returns this
 */
proto.blockjoy.api.ui_v1.Host.prototype.clearStatus = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.Host.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * repeated Node nodes = 13;
 * @return {!Array<!proto.blockjoy.api.ui_v1.Node>}
 */
proto.blockjoy.api.ui_v1.Host.prototype.getNodesList = function() {
  return /** @type{!Array<!proto.blockjoy.api.ui_v1.Node>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.blockjoy.api.ui_v1.Node, 13));
};


/**
 * @param {!Array<!proto.blockjoy.api.ui_v1.Node>} value
 * @return {!proto.blockjoy.api.ui_v1.Host} returns this
*/
proto.blockjoy.api.ui_v1.Host.prototype.setNodesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.blockjoy.api.ui_v1.Node=} opt_value
 * @param {number=} opt_index
 * @return {!proto.blockjoy.api.ui_v1.Node}
 */
proto.blockjoy.api.ui_v1.Host.prototype.addNodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.blockjoy.api.ui_v1.Node, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.blockjoy.api.ui_v1.Host} returns this
 */
proto.blockjoy.api.ui_v1.Host.prototype.clearNodesList = function() {
  return this.setNodesList([]);
};


/**
 * optional google.protobuf.Timestamp created_at = 14;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.blockjoy.api.ui_v1.Host.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 14));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.Host} returns this
*/
proto.blockjoy.api.ui_v1.Host.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.Host} returns this
 */
proto.blockjoy.api.ui_v1.Host.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.Host.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 14) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockjoy.api.ui_v1.HostProvision.prototype.toObject = function(opt_includeInstance) {
  return proto.blockjoy.api.ui_v1.HostProvision.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockjoy.api.ui_v1.HostProvision} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.HostProvision.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    orgId: (f = msg.getOrgId()) && proto.blockjoy.api.ui_v1.Uuid.toObject(includeInstance, f),
    hostId: (f = msg.getHostId()) && proto.blockjoy.api.ui_v1.Uuid.toObject(includeInstance, f),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    claimedAt: (f = msg.getClaimedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    installCmd: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockjoy.api.ui_v1.HostProvision}
 */
proto.blockjoy.api.ui_v1.HostProvision.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockjoy.api.ui_v1.HostProvision;
  return proto.blockjoy.api.ui_v1.HostProvision.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockjoy.api.ui_v1.HostProvision} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockjoy.api.ui_v1.HostProvision}
 */
proto.blockjoy.api.ui_v1.HostProvision.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.blockjoy.api.ui_v1.Uuid;
      reader.readMessage(value,proto.blockjoy.api.ui_v1.Uuid.deserializeBinaryFromReader);
      msg.setOrgId(value);
      break;
    case 3:
      var value = new proto.blockjoy.api.ui_v1.Uuid;
      reader.readMessage(value,proto.blockjoy.api.ui_v1.Uuid.deserializeBinaryFromReader);
      msg.setHostId(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setClaimedAt(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstallCmd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockjoy.api.ui_v1.HostProvision.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockjoy.api.ui_v1.HostProvision.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockjoy.api.ui_v1.HostProvision} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.HostProvision.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOrgId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.blockjoy.api.ui_v1.Uuid.serializeBinaryToWriter
    );
  }
  f = message.getHostId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.blockjoy.api.ui_v1.Uuid.serializeBinaryToWriter
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getClaimedAt();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.blockjoy.api.ui_v1.HostProvision.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.blockjoy.api.ui_v1.HostProvision} returns this
 */
proto.blockjoy.api.ui_v1.HostProvision.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.HostProvision} returns this
 */
proto.blockjoy.api.ui_v1.HostProvision.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.HostProvision.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Uuid org_id = 2;
 * @return {?proto.blockjoy.api.ui_v1.Uuid}
 */
proto.blockjoy.api.ui_v1.HostProvision.prototype.getOrgId = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.Uuid} */ (
    jspb.Message.getWrapperField(this, proto.blockjoy.api.ui_v1.Uuid, 2));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.Uuid|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.HostProvision} returns this
*/
proto.blockjoy.api.ui_v1.HostProvision.prototype.setOrgId = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.HostProvision} returns this
 */
proto.blockjoy.api.ui_v1.HostProvision.prototype.clearOrgId = function() {
  return this.setOrgId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.HostProvision.prototype.hasOrgId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Uuid host_id = 3;
 * @return {?proto.blockjoy.api.ui_v1.Uuid}
 */
proto.blockjoy.api.ui_v1.HostProvision.prototype.getHostId = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.Uuid} */ (
    jspb.Message.getWrapperField(this, proto.blockjoy.api.ui_v1.Uuid, 3));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.Uuid|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.HostProvision} returns this
*/
proto.blockjoy.api.ui_v1.HostProvision.prototype.setHostId = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.HostProvision} returns this
 */
proto.blockjoy.api.ui_v1.HostProvision.prototype.clearHostId = function() {
  return this.setHostId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.HostProvision.prototype.hasHostId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.Timestamp created_at = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.blockjoy.api.ui_v1.HostProvision.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.HostProvision} returns this
*/
proto.blockjoy.api.ui_v1.HostProvision.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.HostProvision} returns this
 */
proto.blockjoy.api.ui_v1.HostProvision.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.HostProvision.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional google.protobuf.Timestamp claimed_at = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.blockjoy.api.ui_v1.HostProvision.prototype.getClaimedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.HostProvision} returns this
*/
proto.blockjoy.api.ui_v1.HostProvision.prototype.setClaimedAt = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.HostProvision} returns this
 */
proto.blockjoy.api.ui_v1.HostProvision.prototype.clearClaimedAt = function() {
  return this.setClaimedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.HostProvision.prototype.hasClaimedAt = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string install_cmd = 6;
 * @return {string}
 */
proto.blockjoy.api.ui_v1.HostProvision.prototype.getInstallCmd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.blockjoy.api.ui_v1.HostProvision} returns this
 */
proto.blockjoy.api.ui_v1.HostProvision.prototype.setInstallCmd = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.HostProvision} returns this
 */
proto.blockjoy.api.ui_v1.HostProvision.prototype.clearInstallCmd = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.HostProvision.prototype.hasInstallCmd = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.blockjoy.api.ui_v1.Node.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockjoy.api.ui_v1.Node.prototype.toObject = function(opt_includeInstance) {
  return proto.blockjoy.api.ui_v1.Node.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockjoy.api.ui_v1.Node} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.Node.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.blockjoy.api.ui_v1.Uuid.toObject(includeInstance, f),
    orgId: (f = msg.getOrgId()) && proto.blockjoy.api.ui_v1.Uuid.toObject(includeInstance, f),
    blockchainId: (f = msg.getBlockchainId()) && proto.blockjoy.api.ui_v1.Uuid.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    groupsList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    version: jspb.Message.getFieldWithDefault(msg, 6, ""),
    ip: jspb.Message.getFieldWithDefault(msg, 7, ""),
    type: jspb.Message.getFieldWithDefault(msg, 8, 0),
    address: jspb.Message.getFieldWithDefault(msg, 9, ""),
    walletAddress: jspb.Message.getFieldWithDefault(msg, 10, ""),
    blockHeight: jspb.Message.getFieldWithDefault(msg, 11, 0),
    nodeData: msg.getNodeData_asB64(),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    updatedAt: (f = msg.getUpdatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    status: jspb.Message.getFieldWithDefault(msg, 15, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockjoy.api.ui_v1.Node}
 */
proto.blockjoy.api.ui_v1.Node.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockjoy.api.ui_v1.Node;
  return proto.blockjoy.api.ui_v1.Node.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockjoy.api.ui_v1.Node} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockjoy.api.ui_v1.Node}
 */
proto.blockjoy.api.ui_v1.Node.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.blockjoy.api.ui_v1.Uuid;
      reader.readMessage(value,proto.blockjoy.api.ui_v1.Uuid.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new proto.blockjoy.api.ui_v1.Uuid;
      reader.readMessage(value,proto.blockjoy.api.ui_v1.Uuid.deserializeBinaryFromReader);
      msg.setOrgId(value);
      break;
    case 3:
      var value = new proto.blockjoy.api.ui_v1.Uuid;
      reader.readMessage(value,proto.blockjoy.api.ui_v1.Uuid.deserializeBinaryFromReader);
      msg.setBlockchainId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addGroups(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 8:
      var value = /** @type {!proto.blockjoy.api.ui_v1.Node.NodeType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setWalletAddress(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBlockHeight(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNodeData(value);
      break;
    case 13:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 14:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setUpdatedAt(value);
      break;
    case 15:
      var value = /** @type {!proto.blockjoy.api.ui_v1.Node.NodeStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockjoy.api.ui_v1.Node.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockjoy.api.ui_v1.Node.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockjoy.api.ui_v1.Node} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.Node.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.blockjoy.api.ui_v1.Uuid.serializeBinaryToWriter
    );
  }
  f = message.getOrgId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.blockjoy.api.ui_v1.Uuid.serializeBinaryToWriter
    );
  }
  f = message.getBlockchainId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.blockjoy.api.ui_v1.Uuid.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {!proto.blockjoy.api.ui_v1.Node.NodeType} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeBytes(
      12,
      f
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getUpdatedAt();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.blockjoy.api.ui_v1.Node.NodeStatus} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeEnum(
      15,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.blockjoy.api.ui_v1.Node.NodeType = {
  UNDEFINEDTYPE: 0,
  NODE: 1,
  API: 2,
  ETL: 3,
  MINER: 4,
  VALIDATOR: 5,
  ORACLE: 6,
  RELAY: 7
};

/**
 * @enum {number}
 */
proto.blockjoy.api.ui_v1.Node.NodeStatus = {
  UNDEFINEDAPPLICATIONSTATUS: 0,
  BROADCASTING: 1,
  CANCELLED: 2,
  DELEGATING: 3,
  DELINQUENT: 4,
  DISABLED: 5,
  EARNING: 6,
  ELECTING: 7,
  ELECTED: 8,
  EXPORTING: 9,
  INGESTING: 10,
  MINING: 11,
  MINTING: 12,
  PROCESSING: 13,
  RELAYING: 14,
  REMOVED: 15,
  REMOVING: 16
};

/**
 * optional Uuid id = 1;
 * @return {?proto.blockjoy.api.ui_v1.Uuid}
 */
proto.blockjoy.api.ui_v1.Node.prototype.getId = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.Uuid} */ (
    jspb.Message.getWrapperField(this, proto.blockjoy.api.ui_v1.Uuid, 1));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.Uuid|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.Node} returns this
*/
proto.blockjoy.api.ui_v1.Node.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.Node} returns this
 */
proto.blockjoy.api.ui_v1.Node.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.Node.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Uuid org_id = 2;
 * @return {?proto.blockjoy.api.ui_v1.Uuid}
 */
proto.blockjoy.api.ui_v1.Node.prototype.getOrgId = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.Uuid} */ (
    jspb.Message.getWrapperField(this, proto.blockjoy.api.ui_v1.Uuid, 2));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.Uuid|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.Node} returns this
*/
proto.blockjoy.api.ui_v1.Node.prototype.setOrgId = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.Node} returns this
 */
proto.blockjoy.api.ui_v1.Node.prototype.clearOrgId = function() {
  return this.setOrgId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.Node.prototype.hasOrgId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Uuid blockchain_id = 3;
 * @return {?proto.blockjoy.api.ui_v1.Uuid}
 */
proto.blockjoy.api.ui_v1.Node.prototype.getBlockchainId = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.Uuid} */ (
    jspb.Message.getWrapperField(this, proto.blockjoy.api.ui_v1.Uuid, 3));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.Uuid|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.Node} returns this
*/
proto.blockjoy.api.ui_v1.Node.prototype.setBlockchainId = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.Node} returns this
 */
proto.blockjoy.api.ui_v1.Node.prototype.clearBlockchainId = function() {
  return this.setBlockchainId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.Node.prototype.hasBlockchainId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.blockjoy.api.ui_v1.Node.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.blockjoy.api.ui_v1.Node} returns this
 */
proto.blockjoy.api.ui_v1.Node.prototype.setName = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.Node} returns this
 */
proto.blockjoy.api.ui_v1.Node.prototype.clearName = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.Node.prototype.hasName = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated string groups = 5;
 * @return {!Array<string>}
 */
proto.blockjoy.api.ui_v1.Node.prototype.getGroupsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.blockjoy.api.ui_v1.Node} returns this
 */
proto.blockjoy.api.ui_v1.Node.prototype.setGroupsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.blockjoy.api.ui_v1.Node} returns this
 */
proto.blockjoy.api.ui_v1.Node.prototype.addGroups = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.blockjoy.api.ui_v1.Node} returns this
 */
proto.blockjoy.api.ui_v1.Node.prototype.clearGroupsList = function() {
  return this.setGroupsList([]);
};


/**
 * optional string version = 6;
 * @return {string}
 */
proto.blockjoy.api.ui_v1.Node.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.blockjoy.api.ui_v1.Node} returns this
 */
proto.blockjoy.api.ui_v1.Node.prototype.setVersion = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.Node} returns this
 */
proto.blockjoy.api.ui_v1.Node.prototype.clearVersion = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.Node.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string ip = 7;
 * @return {string}
 */
proto.blockjoy.api.ui_v1.Node.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.blockjoy.api.ui_v1.Node} returns this
 */
proto.blockjoy.api.ui_v1.Node.prototype.setIp = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.Node} returns this
 */
proto.blockjoy.api.ui_v1.Node.prototype.clearIp = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.Node.prototype.hasIp = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional NodeType type = 8;
 * @return {!proto.blockjoy.api.ui_v1.Node.NodeType}
 */
proto.blockjoy.api.ui_v1.Node.prototype.getType = function() {
  return /** @type {!proto.blockjoy.api.ui_v1.Node.NodeType} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.blockjoy.api.ui_v1.Node.NodeType} value
 * @return {!proto.blockjoy.api.ui_v1.Node} returns this
 */
proto.blockjoy.api.ui_v1.Node.prototype.setType = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.Node} returns this
 */
proto.blockjoy.api.ui_v1.Node.prototype.clearType = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.Node.prototype.hasType = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string address = 9;
 * @return {string}
 */
proto.blockjoy.api.ui_v1.Node.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.blockjoy.api.ui_v1.Node} returns this
 */
proto.blockjoy.api.ui_v1.Node.prototype.setAddress = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.Node} returns this
 */
proto.blockjoy.api.ui_v1.Node.prototype.clearAddress = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.Node.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string wallet_address = 10;
 * @return {string}
 */
proto.blockjoy.api.ui_v1.Node.prototype.getWalletAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.blockjoy.api.ui_v1.Node} returns this
 */
proto.blockjoy.api.ui_v1.Node.prototype.setWalletAddress = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.Node} returns this
 */
proto.blockjoy.api.ui_v1.Node.prototype.clearWalletAddress = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.Node.prototype.hasWalletAddress = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional int64 block_height = 11;
 * @return {number}
 */
proto.blockjoy.api.ui_v1.Node.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.blockjoy.api.ui_v1.Node} returns this
 */
proto.blockjoy.api.ui_v1.Node.prototype.setBlockHeight = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.Node} returns this
 */
proto.blockjoy.api.ui_v1.Node.prototype.clearBlockHeight = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.Node.prototype.hasBlockHeight = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional bytes node_data = 12;
 * @return {!(string|Uint8Array)}
 */
proto.blockjoy.api.ui_v1.Node.prototype.getNodeData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes node_data = 12;
 * This is a type-conversion wrapper around `getNodeData()`
 * @return {string}
 */
proto.blockjoy.api.ui_v1.Node.prototype.getNodeData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNodeData()));
};


/**
 * optional bytes node_data = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNodeData()`
 * @return {!Uint8Array}
 */
proto.blockjoy.api.ui_v1.Node.prototype.getNodeData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNodeData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blockjoy.api.ui_v1.Node} returns this
 */
proto.blockjoy.api.ui_v1.Node.prototype.setNodeData = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.Node} returns this
 */
proto.blockjoy.api.ui_v1.Node.prototype.clearNodeData = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.Node.prototype.hasNodeData = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional google.protobuf.Timestamp created_at = 13;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.blockjoy.api.ui_v1.Node.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 13));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.Node} returns this
*/
proto.blockjoy.api.ui_v1.Node.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.Node} returns this
 */
proto.blockjoy.api.ui_v1.Node.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.Node.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional google.protobuf.Timestamp updated_at = 14;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.blockjoy.api.ui_v1.Node.prototype.getUpdatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 14));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.Node} returns this
*/
proto.blockjoy.api.ui_v1.Node.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.Node} returns this
 */
proto.blockjoy.api.ui_v1.Node.prototype.clearUpdatedAt = function() {
  return this.setUpdatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.Node.prototype.hasUpdatedAt = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional NodeStatus status = 15;
 * @return {!proto.blockjoy.api.ui_v1.Node.NodeStatus}
 */
proto.blockjoy.api.ui_v1.Node.prototype.getStatus = function() {
  return /** @type {!proto.blockjoy.api.ui_v1.Node.NodeStatus} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {!proto.blockjoy.api.ui_v1.Node.NodeStatus} value
 * @return {!proto.blockjoy.api.ui_v1.Node} returns this
 */
proto.blockjoy.api.ui_v1.Node.prototype.setStatus = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.Node} returns this
 */
proto.blockjoy.api.ui_v1.Node.prototype.clearStatus = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.Node.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 15) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockjoy.api.ui_v1.Organization.prototype.toObject = function(opt_includeInstance) {
  return proto.blockjoy.api.ui_v1.Organization.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockjoy.api.ui_v1.Organization} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.Organization.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.blockjoy.api.ui_v1.Uuid.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    personal: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    memberCount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    updatedAt: (f = msg.getUpdatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockjoy.api.ui_v1.Organization}
 */
proto.blockjoy.api.ui_v1.Organization.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockjoy.api.ui_v1.Organization;
  return proto.blockjoy.api.ui_v1.Organization.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockjoy.api.ui_v1.Organization} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockjoy.api.ui_v1.Organization}
 */
proto.blockjoy.api.ui_v1.Organization.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.blockjoy.api.ui_v1.Uuid;
      reader.readMessage(value,proto.blockjoy.api.ui_v1.Uuid.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPersonal(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMemberCount(value);
      break;
    case 13:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 14:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setUpdatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockjoy.api.ui_v1.Organization.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockjoy.api.ui_v1.Organization.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockjoy.api.ui_v1.Organization} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.Organization.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.blockjoy.api.ui_v1.Uuid.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getUpdatedAt();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional Uuid id = 1;
 * @return {?proto.blockjoy.api.ui_v1.Uuid}
 */
proto.blockjoy.api.ui_v1.Organization.prototype.getId = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.Uuid} */ (
    jspb.Message.getWrapperField(this, proto.blockjoy.api.ui_v1.Uuid, 1));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.Uuid|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.Organization} returns this
*/
proto.blockjoy.api.ui_v1.Organization.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.Organization} returns this
 */
proto.blockjoy.api.ui_v1.Organization.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.Organization.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.blockjoy.api.ui_v1.Organization.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.blockjoy.api.ui_v1.Organization} returns this
 */
proto.blockjoy.api.ui_v1.Organization.prototype.setName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.Organization} returns this
 */
proto.blockjoy.api.ui_v1.Organization.prototype.clearName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.Organization.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool personal = 3;
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.Organization.prototype.getPersonal = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.blockjoy.api.ui_v1.Organization} returns this
 */
proto.blockjoy.api.ui_v1.Organization.prototype.setPersonal = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.Organization} returns this
 */
proto.blockjoy.api.ui_v1.Organization.prototype.clearPersonal = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.Organization.prototype.hasPersonal = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 member_count = 4;
 * @return {number}
 */
proto.blockjoy.api.ui_v1.Organization.prototype.getMemberCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.blockjoy.api.ui_v1.Organization} returns this
 */
proto.blockjoy.api.ui_v1.Organization.prototype.setMemberCount = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.Organization} returns this
 */
proto.blockjoy.api.ui_v1.Organization.prototype.clearMemberCount = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.Organization.prototype.hasMemberCount = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional google.protobuf.Timestamp created_at = 13;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.blockjoy.api.ui_v1.Organization.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 13));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.Organization} returns this
*/
proto.blockjoy.api.ui_v1.Organization.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.Organization} returns this
 */
proto.blockjoy.api.ui_v1.Organization.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.Organization.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional google.protobuf.Timestamp updated_at = 14;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.blockjoy.api.ui_v1.Organization.prototype.getUpdatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 14));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.Organization} returns this
*/
proto.blockjoy.api.ui_v1.Organization.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.Organization} returns this
 */
proto.blockjoy.api.ui_v1.Organization.prototype.clearUpdatedAt = function() {
  return this.setUpdatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.Organization.prototype.hasUpdatedAt = function() {
  return jspb.Message.getField(this, 14) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockjoy.api.ui_v1.InfoUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.blockjoy.api.ui_v1.InfoUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockjoy.api.ui_v1.InfoUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.InfoUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    host: (f = msg.getHost()) && proto.blockjoy.api.ui_v1.Host.toObject(includeInstance, f),
    node: (f = msg.getNode()) && proto.blockjoy.api.ui_v1.Node.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockjoy.api.ui_v1.InfoUpdate}
 */
proto.blockjoy.api.ui_v1.InfoUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockjoy.api.ui_v1.InfoUpdate;
  return proto.blockjoy.api.ui_v1.InfoUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockjoy.api.ui_v1.InfoUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockjoy.api.ui_v1.InfoUpdate}
 */
proto.blockjoy.api.ui_v1.InfoUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.blockjoy.api.ui_v1.Host;
      reader.readMessage(value,proto.blockjoy.api.ui_v1.Host.deserializeBinaryFromReader);
      msg.setHost(value);
      break;
    case 2:
      var value = new proto.blockjoy.api.ui_v1.Node;
      reader.readMessage(value,proto.blockjoy.api.ui_v1.Node.deserializeBinaryFromReader);
      msg.setNode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockjoy.api.ui_v1.InfoUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockjoy.api.ui_v1.InfoUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockjoy.api.ui_v1.InfoUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.InfoUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHost();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.blockjoy.api.ui_v1.Host.serializeBinaryToWriter
    );
  }
  f = message.getNode();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.blockjoy.api.ui_v1.Node.serializeBinaryToWriter
    );
  }
};


/**
 * optional Host host = 1;
 * @return {?proto.blockjoy.api.ui_v1.Host}
 */
proto.blockjoy.api.ui_v1.InfoUpdate.prototype.getHost = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.Host} */ (
    jspb.Message.getWrapperField(this, proto.blockjoy.api.ui_v1.Host, 1));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.Host|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.InfoUpdate} returns this
*/
proto.blockjoy.api.ui_v1.InfoUpdate.prototype.setHost = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.InfoUpdate} returns this
 */
proto.blockjoy.api.ui_v1.InfoUpdate.prototype.clearHost = function() {
  return this.setHost(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.InfoUpdate.prototype.hasHost = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Node node = 2;
 * @return {?proto.blockjoy.api.ui_v1.Node}
 */
proto.blockjoy.api.ui_v1.InfoUpdate.prototype.getNode = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.Node} */ (
    jspb.Message.getWrapperField(this, proto.blockjoy.api.ui_v1.Node, 2));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.Node|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.InfoUpdate} returns this
*/
proto.blockjoy.api.ui_v1.InfoUpdate.prototype.setNode = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.InfoUpdate} returns this
 */
proto.blockjoy.api.ui_v1.InfoUpdate.prototype.clearNode = function() {
  return this.setNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.InfoUpdate.prototype.hasNode = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockjoy.api.ui_v1.User.prototype.toObject = function(opt_includeInstance) {
  return proto.blockjoy.api.ui_v1.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockjoy.api.ui_v1.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.blockjoy.api.ui_v1.Uuid.toObject(includeInstance, f),
    email: jspb.Message.getFieldWithDefault(msg, 2, ""),
    firstName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    lastName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    updatedAt: (f = msg.getUpdatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockjoy.api.ui_v1.User}
 */
proto.blockjoy.api.ui_v1.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockjoy.api.ui_v1.User;
  return proto.blockjoy.api.ui_v1.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockjoy.api.ui_v1.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockjoy.api.ui_v1.User}
 */
proto.blockjoy.api.ui_v1.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.blockjoy.api.ui_v1.Uuid;
      reader.readMessage(value,proto.blockjoy.api.ui_v1.Uuid.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastName(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 6:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setUpdatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockjoy.api.ui_v1.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockjoy.api.ui_v1.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockjoy.api.ui_v1.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.blockjoy.api.ui_v1.Uuid.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getUpdatedAt();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional Uuid id = 1;
 * @return {?proto.blockjoy.api.ui_v1.Uuid}
 */
proto.blockjoy.api.ui_v1.User.prototype.getId = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.Uuid} */ (
    jspb.Message.getWrapperField(this, proto.blockjoy.api.ui_v1.Uuid, 1));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.Uuid|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.User} returns this
*/
proto.blockjoy.api.ui_v1.User.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.User} returns this
 */
proto.blockjoy.api.ui_v1.User.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.User.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string email = 2;
 * @return {string}
 */
proto.blockjoy.api.ui_v1.User.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.blockjoy.api.ui_v1.User} returns this
 */
proto.blockjoy.api.ui_v1.User.prototype.setEmail = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.User} returns this
 */
proto.blockjoy.api.ui_v1.User.prototype.clearEmail = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.User.prototype.hasEmail = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string first_name = 3;
 * @return {string}
 */
proto.blockjoy.api.ui_v1.User.prototype.getFirstName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.blockjoy.api.ui_v1.User} returns this
 */
proto.blockjoy.api.ui_v1.User.prototype.setFirstName = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.User} returns this
 */
proto.blockjoy.api.ui_v1.User.prototype.clearFirstName = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.User.prototype.hasFirstName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string last_name = 4;
 * @return {string}
 */
proto.blockjoy.api.ui_v1.User.prototype.getLastName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.blockjoy.api.ui_v1.User} returns this
 */
proto.blockjoy.api.ui_v1.User.prototype.setLastName = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.User} returns this
 */
proto.blockjoy.api.ui_v1.User.prototype.clearLastName = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.User.prototype.hasLastName = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional google.protobuf.Timestamp created_at = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.blockjoy.api.ui_v1.User.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.User} returns this
*/
proto.blockjoy.api.ui_v1.User.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.User} returns this
 */
proto.blockjoy.api.ui_v1.User.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.User.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional google.protobuf.Timestamp updated_at = 6;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.blockjoy.api.ui_v1.User.prototype.getUpdatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 6));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.User} returns this
*/
proto.blockjoy.api.ui_v1.User.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.User} returns this
 */
proto.blockjoy.api.ui_v1.User.prototype.clearUpdatedAt = function() {
  return this.setUpdatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.User.prototype.hasUpdatedAt = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockjoy.api.ui_v1.Bill.prototype.toObject = function(opt_includeInstance) {
  return proto.blockjoy.api.ui_v1.Bill.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockjoy.api.ui_v1.Bill} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.Bill.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    taxNumber: jspb.Message.getFieldWithDefault(msg, 3, ""),
    receiverName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    receiverAddress: jspb.Message.getFieldWithDefault(msg, 5, ""),
    taxRate: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    netAmount: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    grossAmount: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    pdfUrl: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockjoy.api.ui_v1.Bill}
 */
proto.blockjoy.api.ui_v1.Bill.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockjoy.api.ui_v1.Bill;
  return proto.blockjoy.api.ui_v1.Bill.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockjoy.api.ui_v1.Bill} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockjoy.api.ui_v1.Bill}
 */
proto.blockjoy.api.ui_v1.Bill.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaxNumber(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiverName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiverAddress(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTaxRate(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setNetAmount(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setGrossAmount(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setPdfUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockjoy.api.ui_v1.Bill.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockjoy.api.ui_v1.Bill.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockjoy.api.ui_v1.Bill} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.Bill.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.blockjoy.api.ui_v1.Bill.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.blockjoy.api.ui_v1.Bill} returns this
 */
proto.blockjoy.api.ui_v1.Bill.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.Bill} returns this
 */
proto.blockjoy.api.ui_v1.Bill.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.Bill.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Timestamp created_at = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.blockjoy.api.ui_v1.Bill.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.Bill} returns this
*/
proto.blockjoy.api.ui_v1.Bill.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.Bill} returns this
 */
proto.blockjoy.api.ui_v1.Bill.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.Bill.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string tax_number = 3;
 * @return {string}
 */
proto.blockjoy.api.ui_v1.Bill.prototype.getTaxNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.blockjoy.api.ui_v1.Bill} returns this
 */
proto.blockjoy.api.ui_v1.Bill.prototype.setTaxNumber = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.Bill} returns this
 */
proto.blockjoy.api.ui_v1.Bill.prototype.clearTaxNumber = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.Bill.prototype.hasTaxNumber = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string receiver_name = 4;
 * @return {string}
 */
proto.blockjoy.api.ui_v1.Bill.prototype.getReceiverName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.blockjoy.api.ui_v1.Bill} returns this
 */
proto.blockjoy.api.ui_v1.Bill.prototype.setReceiverName = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.Bill} returns this
 */
proto.blockjoy.api.ui_v1.Bill.prototype.clearReceiverName = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.Bill.prototype.hasReceiverName = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string receiver_address = 5;
 * @return {string}
 */
proto.blockjoy.api.ui_v1.Bill.prototype.getReceiverAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.blockjoy.api.ui_v1.Bill} returns this
 */
proto.blockjoy.api.ui_v1.Bill.prototype.setReceiverAddress = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.Bill} returns this
 */
proto.blockjoy.api.ui_v1.Bill.prototype.clearReceiverAddress = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.Bill.prototype.hasReceiverAddress = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional float tax_rate = 6;
 * @return {number}
 */
proto.blockjoy.api.ui_v1.Bill.prototype.getTaxRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.blockjoy.api.ui_v1.Bill} returns this
 */
proto.blockjoy.api.ui_v1.Bill.prototype.setTaxRate = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.Bill} returns this
 */
proto.blockjoy.api.ui_v1.Bill.prototype.clearTaxRate = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.Bill.prototype.hasTaxRate = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional float net_amount = 7;
 * @return {number}
 */
proto.blockjoy.api.ui_v1.Bill.prototype.getNetAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.blockjoy.api.ui_v1.Bill} returns this
 */
proto.blockjoy.api.ui_v1.Bill.prototype.setNetAmount = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.Bill} returns this
 */
proto.blockjoy.api.ui_v1.Bill.prototype.clearNetAmount = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.Bill.prototype.hasNetAmount = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional float gross_amount = 8;
 * @return {number}
 */
proto.blockjoy.api.ui_v1.Bill.prototype.getGrossAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.blockjoy.api.ui_v1.Bill} returns this
 */
proto.blockjoy.api.ui_v1.Bill.prototype.setGrossAmount = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.Bill} returns this
 */
proto.blockjoy.api.ui_v1.Bill.prototype.clearGrossAmount = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.Bill.prototype.hasGrossAmount = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string pdf_url = 9;
 * @return {string}
 */
proto.blockjoy.api.ui_v1.Bill.prototype.getPdfUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.blockjoy.api.ui_v1.Bill} returns this
 */
proto.blockjoy.api.ui_v1.Bill.prototype.setPdfUrl = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.Bill} returns this
 */
proto.blockjoy.api.ui_v1.Bill.prototype.clearPdfUrl = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.Bill.prototype.hasPdfUrl = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockjoy.api.ui_v1.KPI.prototype.toObject = function(opt_includeInstance) {
  return proto.blockjoy.api.ui_v1.KPI.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockjoy.api.ui_v1.KPI} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.KPI.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: (f = msg.getValue()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockjoy.api.ui_v1.KPI}
 */
proto.blockjoy.api.ui_v1.KPI.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockjoy.api.ui_v1.KPI;
  return proto.blockjoy.api.ui_v1.KPI.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockjoy.api.ui_v1.KPI} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockjoy.api.ui_v1.KPI}
 */
proto.blockjoy.api.ui_v1.KPI.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.blockjoy.api.ui_v1.KPI.Name} */ (reader.readEnum());
      msg.setName(value);
      break;
    case 2:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockjoy.api.ui_v1.KPI.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockjoy.api.ui_v1.KPI.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockjoy.api.ui_v1.KPI} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.KPI.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.blockjoy.api.ui_v1.KPI.Name = {
  UNKNOWN: 0,
  NODES: 1,
  HOSTS: 2,
  ONLINE: 3,
  OFFLINE: 4
};

/**
 * optional Name name = 1;
 * @return {!proto.blockjoy.api.ui_v1.KPI.Name}
 */
proto.blockjoy.api.ui_v1.KPI.prototype.getName = function() {
  return /** @type {!proto.blockjoy.api.ui_v1.KPI.Name} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.blockjoy.api.ui_v1.KPI.Name} value
 * @return {!proto.blockjoy.api.ui_v1.KPI} returns this
 */
proto.blockjoy.api.ui_v1.KPI.prototype.setName = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional google.protobuf.Any value = 2;
 * @return {?proto.google.protobuf.Any}
 */
proto.blockjoy.api.ui_v1.KPI.prototype.getValue = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 2));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.KPI} returns this
*/
proto.blockjoy.api.ui_v1.KPI.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.KPI} returns this
 */
proto.blockjoy.api.ui_v1.KPI.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.KPI.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockjoy.api.ui_v1.UserConfigurationParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.blockjoy.api.ui_v1.UserConfigurationParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockjoy.api.ui_v1.UserConfigurationParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.UserConfigurationParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: (f = msg.getValue()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockjoy.api.ui_v1.UserConfigurationParameter}
 */
proto.blockjoy.api.ui_v1.UserConfigurationParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockjoy.api.ui_v1.UserConfigurationParameter;
  return proto.blockjoy.api.ui_v1.UserConfigurationParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockjoy.api.ui_v1.UserConfigurationParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockjoy.api.ui_v1.UserConfigurationParameter}
 */
proto.blockjoy.api.ui_v1.UserConfigurationParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockjoy.api.ui_v1.UserConfigurationParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockjoy.api.ui_v1.UserConfigurationParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockjoy.api.ui_v1.UserConfigurationParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.UserConfigurationParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.blockjoy.api.ui_v1.UserConfigurationParameter.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.blockjoy.api.ui_v1.UserConfigurationParameter} returns this
 */
proto.blockjoy.api.ui_v1.UserConfigurationParameter.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Any value = 2;
 * @return {?proto.google.protobuf.Any}
 */
proto.blockjoy.api.ui_v1.UserConfigurationParameter.prototype.getValue = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 2));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.UserConfigurationParameter} returns this
*/
proto.blockjoy.api.ui_v1.UserConfigurationParameter.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.UserConfigurationParameter} returns this
 */
proto.blockjoy.api.ui_v1.UserConfigurationParameter.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.UserConfigurationParameter.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.blockjoy.api.ui_v1);
