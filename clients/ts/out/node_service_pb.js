// source: node_service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
goog.exportSymbol('proto.blockjoy.api.ui_v1.CreateNodeRequest', null, global);
goog.exportSymbol('proto.blockjoy.api.ui_v1.CreateNodeResponse', null, global);
goog.exportSymbol('proto.blockjoy.api.ui_v1.GetNodeRequest', null, global);
goog.exportSymbol('proto.blockjoy.api.ui_v1.GetNodeResponse', null, global);
goog.exportSymbol('proto.blockjoy.api.ui_v1.UpdateNodeRequest', null, global);
goog.exportSymbol('proto.blockjoy.api.ui_v1.UpdateNodeResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockjoy.api.ui_v1.CreateNodeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockjoy.api.ui_v1.CreateNodeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockjoy.api.ui_v1.CreateNodeRequest.displayName = 'proto.blockjoy.api.ui_v1.CreateNodeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockjoy.api.ui_v1.CreateNodeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockjoy.api.ui_v1.CreateNodeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockjoy.api.ui_v1.CreateNodeResponse.displayName = 'proto.blockjoy.api.ui_v1.CreateNodeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockjoy.api.ui_v1.GetNodeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockjoy.api.ui_v1.GetNodeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockjoy.api.ui_v1.GetNodeRequest.displayName = 'proto.blockjoy.api.ui_v1.GetNodeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockjoy.api.ui_v1.GetNodeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.blockjoy.api.ui_v1.GetNodeResponse.repeatedFields_, null);
};
goog.inherits(proto.blockjoy.api.ui_v1.GetNodeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockjoy.api.ui_v1.GetNodeResponse.displayName = 'proto.blockjoy.api.ui_v1.GetNodeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockjoy.api.ui_v1.UpdateNodeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockjoy.api.ui_v1.UpdateNodeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockjoy.api.ui_v1.UpdateNodeRequest.displayName = 'proto.blockjoy.api.ui_v1.UpdateNodeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockjoy.api.ui_v1.UpdateNodeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockjoy.api.ui_v1.UpdateNodeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockjoy.api.ui_v1.UpdateNodeResponse.displayName = 'proto.blockjoy.api.ui_v1.UpdateNodeResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockjoy.api.ui_v1.CreateNodeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.blockjoy.api.ui_v1.CreateNodeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockjoy.api.ui_v1.CreateNodeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.CreateNodeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    meta: (f = msg.getMeta()) && common_pb.RequestMeta.toObject(includeInstance, f),
    node: (f = msg.getNode()) && common_pb.Node.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockjoy.api.ui_v1.CreateNodeRequest}
 */
proto.blockjoy.api.ui_v1.CreateNodeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockjoy.api.ui_v1.CreateNodeRequest;
  return proto.blockjoy.api.ui_v1.CreateNodeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockjoy.api.ui_v1.CreateNodeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockjoy.api.ui_v1.CreateNodeRequest}
 */
proto.blockjoy.api.ui_v1.CreateNodeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.RequestMeta;
      reader.readMessage(value,common_pb.RequestMeta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    case 2:
      var value = new common_pb.Node;
      reader.readMessage(value,common_pb.Node.deserializeBinaryFromReader);
      msg.setNode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockjoy.api.ui_v1.CreateNodeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockjoy.api.ui_v1.CreateNodeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockjoy.api.ui_v1.CreateNodeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.CreateNodeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.RequestMeta.serializeBinaryToWriter
    );
  }
  f = message.getNode();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Node.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestMeta meta = 1;
 * @return {?proto.blockjoy.api.ui_v1.RequestMeta}
 */
proto.blockjoy.api.ui_v1.CreateNodeRequest.prototype.getMeta = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.RequestMeta} */ (
    jspb.Message.getWrapperField(this, common_pb.RequestMeta, 1));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.RequestMeta|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.CreateNodeRequest} returns this
*/
proto.blockjoy.api.ui_v1.CreateNodeRequest.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.CreateNodeRequest} returns this
 */
proto.blockjoy.api.ui_v1.CreateNodeRequest.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.CreateNodeRequest.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Node node = 2;
 * @return {?proto.blockjoy.api.ui_v1.Node}
 */
proto.blockjoy.api.ui_v1.CreateNodeRequest.prototype.getNode = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.Node} */ (
    jspb.Message.getWrapperField(this, common_pb.Node, 2));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.Node|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.CreateNodeRequest} returns this
*/
proto.blockjoy.api.ui_v1.CreateNodeRequest.prototype.setNode = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.CreateNodeRequest} returns this
 */
proto.blockjoy.api.ui_v1.CreateNodeRequest.prototype.clearNode = function() {
  return this.setNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.CreateNodeRequest.prototype.hasNode = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockjoy.api.ui_v1.CreateNodeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.blockjoy.api.ui_v1.CreateNodeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockjoy.api.ui_v1.CreateNodeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.CreateNodeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    meta: (f = msg.getMeta()) && common_pb.ResponseMeta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockjoy.api.ui_v1.CreateNodeResponse}
 */
proto.blockjoy.api.ui_v1.CreateNodeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockjoy.api.ui_v1.CreateNodeResponse;
  return proto.blockjoy.api.ui_v1.CreateNodeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockjoy.api.ui_v1.CreateNodeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockjoy.api.ui_v1.CreateNodeResponse}
 */
proto.blockjoy.api.ui_v1.CreateNodeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.ResponseMeta;
      reader.readMessage(value,common_pb.ResponseMeta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockjoy.api.ui_v1.CreateNodeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockjoy.api.ui_v1.CreateNodeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockjoy.api.ui_v1.CreateNodeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.CreateNodeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.ResponseMeta.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseMeta meta = 1;
 * @return {?proto.blockjoy.api.ui_v1.ResponseMeta}
 */
proto.blockjoy.api.ui_v1.CreateNodeResponse.prototype.getMeta = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.ResponseMeta} */ (
    jspb.Message.getWrapperField(this, common_pb.ResponseMeta, 1));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.ResponseMeta|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.CreateNodeResponse} returns this
*/
proto.blockjoy.api.ui_v1.CreateNodeResponse.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.CreateNodeResponse} returns this
 */
proto.blockjoy.api.ui_v1.CreateNodeResponse.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.CreateNodeResponse.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockjoy.api.ui_v1.GetNodeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.blockjoy.api.ui_v1.GetNodeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockjoy.api.ui_v1.GetNodeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.GetNodeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    meta: (f = msg.getMeta()) && common_pb.RequestMeta.toObject(includeInstance, f),
    id: (f = msg.getId()) && common_pb.Uuid.toObject(includeInstance, f),
    orgId: (f = msg.getOrgId()) && common_pb.Uuid.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockjoy.api.ui_v1.GetNodeRequest}
 */
proto.blockjoy.api.ui_v1.GetNodeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockjoy.api.ui_v1.GetNodeRequest;
  return proto.blockjoy.api.ui_v1.GetNodeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockjoy.api.ui_v1.GetNodeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockjoy.api.ui_v1.GetNodeRequest}
 */
proto.blockjoy.api.ui_v1.GetNodeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.RequestMeta;
      reader.readMessage(value,common_pb.RequestMeta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    case 2:
      var value = new common_pb.Uuid;
      reader.readMessage(value,common_pb.Uuid.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 3:
      var value = new common_pb.Uuid;
      reader.readMessage(value,common_pb.Uuid.deserializeBinaryFromReader);
      msg.setOrgId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockjoy.api.ui_v1.GetNodeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockjoy.api.ui_v1.GetNodeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockjoy.api.ui_v1.GetNodeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.GetNodeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.RequestMeta.serializeBinaryToWriter
    );
  }
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Uuid.serializeBinaryToWriter
    );
  }
  f = message.getOrgId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      common_pb.Uuid.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestMeta meta = 1;
 * @return {?proto.blockjoy.api.ui_v1.RequestMeta}
 */
proto.blockjoy.api.ui_v1.GetNodeRequest.prototype.getMeta = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.RequestMeta} */ (
    jspb.Message.getWrapperField(this, common_pb.RequestMeta, 1));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.RequestMeta|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.GetNodeRequest} returns this
*/
proto.blockjoy.api.ui_v1.GetNodeRequest.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.GetNodeRequest} returns this
 */
proto.blockjoy.api.ui_v1.GetNodeRequest.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.GetNodeRequest.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Uuid id = 2;
 * @return {?proto.blockjoy.api.ui_v1.Uuid}
 */
proto.blockjoy.api.ui_v1.GetNodeRequest.prototype.getId = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.Uuid} */ (
    jspb.Message.getWrapperField(this, common_pb.Uuid, 2));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.Uuid|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.GetNodeRequest} returns this
*/
proto.blockjoy.api.ui_v1.GetNodeRequest.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.GetNodeRequest} returns this
 */
proto.blockjoy.api.ui_v1.GetNodeRequest.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.GetNodeRequest.prototype.hasId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Uuid org_id = 3;
 * @return {?proto.blockjoy.api.ui_v1.Uuid}
 */
proto.blockjoy.api.ui_v1.GetNodeRequest.prototype.getOrgId = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.Uuid} */ (
    jspb.Message.getWrapperField(this, common_pb.Uuid, 3));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.Uuid|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.GetNodeRequest} returns this
*/
proto.blockjoy.api.ui_v1.GetNodeRequest.prototype.setOrgId = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.GetNodeRequest} returns this
 */
proto.blockjoy.api.ui_v1.GetNodeRequest.prototype.clearOrgId = function() {
  return this.setOrgId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.GetNodeRequest.prototype.hasOrgId = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.blockjoy.api.ui_v1.GetNodeResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockjoy.api.ui_v1.GetNodeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.blockjoy.api.ui_v1.GetNodeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockjoy.api.ui_v1.GetNodeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.GetNodeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    meta: (f = msg.getMeta()) && common_pb.ResponseMeta.toObject(includeInstance, f),
    nodesList: jspb.Message.toObjectList(msg.getNodesList(),
    common_pb.Node.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockjoy.api.ui_v1.GetNodeResponse}
 */
proto.blockjoy.api.ui_v1.GetNodeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockjoy.api.ui_v1.GetNodeResponse;
  return proto.blockjoy.api.ui_v1.GetNodeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockjoy.api.ui_v1.GetNodeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockjoy.api.ui_v1.GetNodeResponse}
 */
proto.blockjoy.api.ui_v1.GetNodeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.ResponseMeta;
      reader.readMessage(value,common_pb.ResponseMeta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    case 2:
      var value = new common_pb.Node;
      reader.readMessage(value,common_pb.Node.deserializeBinaryFromReader);
      msg.addNodes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockjoy.api.ui_v1.GetNodeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockjoy.api.ui_v1.GetNodeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockjoy.api.ui_v1.GetNodeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.GetNodeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.ResponseMeta.serializeBinaryToWriter
    );
  }
  f = message.getNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      common_pb.Node.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseMeta meta = 1;
 * @return {?proto.blockjoy.api.ui_v1.ResponseMeta}
 */
proto.blockjoy.api.ui_v1.GetNodeResponse.prototype.getMeta = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.ResponseMeta} */ (
    jspb.Message.getWrapperField(this, common_pb.ResponseMeta, 1));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.ResponseMeta|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.GetNodeResponse} returns this
*/
proto.blockjoy.api.ui_v1.GetNodeResponse.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.GetNodeResponse} returns this
 */
proto.blockjoy.api.ui_v1.GetNodeResponse.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.GetNodeResponse.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Node nodes = 2;
 * @return {!Array<!proto.blockjoy.api.ui_v1.Node>}
 */
proto.blockjoy.api.ui_v1.GetNodeResponse.prototype.getNodesList = function() {
  return /** @type{!Array<!proto.blockjoy.api.ui_v1.Node>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.Node, 2));
};


/**
 * @param {!Array<!proto.blockjoy.api.ui_v1.Node>} value
 * @return {!proto.blockjoy.api.ui_v1.GetNodeResponse} returns this
*/
proto.blockjoy.api.ui_v1.GetNodeResponse.prototype.setNodesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.blockjoy.api.ui_v1.Node=} opt_value
 * @param {number=} opt_index
 * @return {!proto.blockjoy.api.ui_v1.Node}
 */
proto.blockjoy.api.ui_v1.GetNodeResponse.prototype.addNodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.blockjoy.api.ui_v1.Node, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.blockjoy.api.ui_v1.GetNodeResponse} returns this
 */
proto.blockjoy.api.ui_v1.GetNodeResponse.prototype.clearNodesList = function() {
  return this.setNodesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockjoy.api.ui_v1.UpdateNodeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.blockjoy.api.ui_v1.UpdateNodeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockjoy.api.ui_v1.UpdateNodeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.UpdateNodeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    meta: (f = msg.getMeta()) && common_pb.RequestMeta.toObject(includeInstance, f),
    node: (f = msg.getNode()) && common_pb.Node.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockjoy.api.ui_v1.UpdateNodeRequest}
 */
proto.blockjoy.api.ui_v1.UpdateNodeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockjoy.api.ui_v1.UpdateNodeRequest;
  return proto.blockjoy.api.ui_v1.UpdateNodeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockjoy.api.ui_v1.UpdateNodeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockjoy.api.ui_v1.UpdateNodeRequest}
 */
proto.blockjoy.api.ui_v1.UpdateNodeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.RequestMeta;
      reader.readMessage(value,common_pb.RequestMeta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    case 2:
      var value = new common_pb.Node;
      reader.readMessage(value,common_pb.Node.deserializeBinaryFromReader);
      msg.setNode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockjoy.api.ui_v1.UpdateNodeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockjoy.api.ui_v1.UpdateNodeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockjoy.api.ui_v1.UpdateNodeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.UpdateNodeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.RequestMeta.serializeBinaryToWriter
    );
  }
  f = message.getNode();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Node.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestMeta meta = 1;
 * @return {?proto.blockjoy.api.ui_v1.RequestMeta}
 */
proto.blockjoy.api.ui_v1.UpdateNodeRequest.prototype.getMeta = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.RequestMeta} */ (
    jspb.Message.getWrapperField(this, common_pb.RequestMeta, 1));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.RequestMeta|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.UpdateNodeRequest} returns this
*/
proto.blockjoy.api.ui_v1.UpdateNodeRequest.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.UpdateNodeRequest} returns this
 */
proto.blockjoy.api.ui_v1.UpdateNodeRequest.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.UpdateNodeRequest.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Node node = 2;
 * @return {?proto.blockjoy.api.ui_v1.Node}
 */
proto.blockjoy.api.ui_v1.UpdateNodeRequest.prototype.getNode = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.Node} */ (
    jspb.Message.getWrapperField(this, common_pb.Node, 2));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.Node|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.UpdateNodeRequest} returns this
*/
proto.blockjoy.api.ui_v1.UpdateNodeRequest.prototype.setNode = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.UpdateNodeRequest} returns this
 */
proto.blockjoy.api.ui_v1.UpdateNodeRequest.prototype.clearNode = function() {
  return this.setNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.UpdateNodeRequest.prototype.hasNode = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockjoy.api.ui_v1.UpdateNodeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.blockjoy.api.ui_v1.UpdateNodeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockjoy.api.ui_v1.UpdateNodeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.UpdateNodeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    meta: (f = msg.getMeta()) && common_pb.ResponseMeta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockjoy.api.ui_v1.UpdateNodeResponse}
 */
proto.blockjoy.api.ui_v1.UpdateNodeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockjoy.api.ui_v1.UpdateNodeResponse;
  return proto.blockjoy.api.ui_v1.UpdateNodeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockjoy.api.ui_v1.UpdateNodeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockjoy.api.ui_v1.UpdateNodeResponse}
 */
proto.blockjoy.api.ui_v1.UpdateNodeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.ResponseMeta;
      reader.readMessage(value,common_pb.ResponseMeta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockjoy.api.ui_v1.UpdateNodeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockjoy.api.ui_v1.UpdateNodeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockjoy.api.ui_v1.UpdateNodeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockjoy.api.ui_v1.UpdateNodeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.ResponseMeta.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseMeta meta = 1;
 * @return {?proto.blockjoy.api.ui_v1.ResponseMeta}
 */
proto.blockjoy.api.ui_v1.UpdateNodeResponse.prototype.getMeta = function() {
  return /** @type{?proto.blockjoy.api.ui_v1.ResponseMeta} */ (
    jspb.Message.getWrapperField(this, common_pb.ResponseMeta, 1));
};


/**
 * @param {?proto.blockjoy.api.ui_v1.ResponseMeta|undefined} value
 * @return {!proto.blockjoy.api.ui_v1.UpdateNodeResponse} returns this
*/
proto.blockjoy.api.ui_v1.UpdateNodeResponse.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockjoy.api.ui_v1.UpdateNodeResponse} returns this
 */
proto.blockjoy.api.ui_v1.UpdateNodeResponse.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockjoy.api.ui_v1.UpdateNodeResponse.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.blockjoy.api.ui_v1);
